<?xml version="1.0" encoding="utf-8"?>
<TestSuite targetFramework="NUnit" failOnServerPublishFailure="False" revision="34" pushRevisionToAssembly="False" lastAssetContentPath="DanElzerAverageCommission_Assets" name="Dan Elzer Average Commission" uniqueId="ae79b540-c994-4d59-9294-b3d13bfa03a9" isEnabled="True">
  <Assets>
    <TestAssetCollection>
      <TestAssets />
    </TestAssetCollection>
  </Assets>
  <TestGroups>
    <TestGroup conditionFlag="" name="Dan Elzer Average Commission" uniqueId="7594a693-f950-4302-a702-37eb1620d869" isEnabled="True">
      <CoverageTargets />
      <Annotations />
      <Assets>
        <TestAssetCollection>
          <TestAssets>
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="DWH stage" uniqueId="9c0a93a6-e320-45e7-8e7d-50bba97c5f8f" isEnabled="True" provider="System.Data.SqlClient" connectionString="hYkgHZSlyCZ8kGkHHn8WDengAhWkqn5KWHoaRh0nbTjoELDg8WFebn3lk4L4/QXwID/lMay7klW2RlhW15OVU7X1ICGsuJs8W74uevf41k0YNoBZm79S2cg1aqc7ZbYUHIVVIGa3uEXX+LSazX2RHA==" />
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="SSAS Matrix Production" uniqueId="b89de6ca-e660-4205-b75e-0566246db3fc" isEnabled="True" provider="System.Data.OleDb" connectionString="1NU6x5CRgZH7WSzO2Xnzl72gt+011lbIi3W0TUQ5j6Gk6C09AxEe04Stq4ibTEYseCdJPloBqY1VatLSgifau2GOst88s22lL4DeABNM6HSxl/j0Hymf0ZmdnpzxTKMciLf60u+cY4fWnpCVfZfT0JLYVOSR/zgzKqFAlQnL070P8ftso8cOipSgNlKeUEBqsd6wY9TI9WKsXPRZv5MTjF11NLwWZAULDOLM4O20DWJLrPn3TPhZ/I5lzhGvRo6M" />
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="DWH Prod" uniqueId="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" isEnabled="True" provider="System.Data.SqlClient" connectionString="Qd4iffJj9QB+I2wsFl6atb7JdC5r8m7o9PEj8GfycW2gICgF74LNsskz0/xg4c33k5+KmQhnDNPb5GRt3o9wcjIo7enbkYAPQl0h87zND3Wrn6TKO992GO6sLZRV1kh3" />
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="SSAS Matrix Stage" uniqueId="8e44e5c0-5a37-4644-88a9-d311993a301b" isEnabled="True" provider="System.Data.OleDb" connectionString="1NU6x5CRgZH7WSzO2Xnzl72gt+011lbIi3W0TUQ5j6Gk6C09AxEe04Stq4ibTEYsZCKjLLB+b8iJqJRf0eX9p30L++8MDb1InuuXHu2rYgx04lMp6CSQC8BL/ekR+aRX2uEOe2j96AIKFyIZJ50uF3Aly1TeuWYZfx2d1Bh/EgChBVfvTvSsjhY5J7GO7U67KanK3Wz3RLw7hB9j8fiKTbGW+k0hoh+PfZbtCUel+aouvpjH1bpETBpMLMJAPcgu" />
          </TestAssets>
        </TestAssetCollection>
      </Assets>
      <GroupInitializationSteps />
      <TestInitializationSteps />
      <Tests>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Sum of Full Selling Commision" uniqueId="5412ef34-58a2-4f42-a963-a291d2897472" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="d8bd41ba-a60e-4c23-a12d-7d18832e3b21" isEnabled="True">
                  <Value>Select SUM (fs.[Net Commission]) SumFull_Selling_Commission from viewFactCommission fs
join dw.dimSales s 
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="2796ba3f-1836-410c-a57c-47fa83eafe42" isEnabled="True">
                  <Value>// DAX Query
EVALUATE
  ROW(
    "SumFull_Selling_Commission", CALCULATE(SUM('Listing'[Full Selling Commission]))
  )</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="16375175-e070-4444-bc42-b97d2a95228b" isEnabled="True" leftGridProvider="6866d4e0-570c-4fd4-975a-bfe8d467eef2" rightGridProvider="70ec1e00-47c4-4b4d-a72e-62bd584913ce">
                  <LeftColumns>
                    <Column index="0" columnName="SumFull_Selling_Commission" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="[SumFull_Selling_Commission]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="2eb0292c-1318-4d86-8e5b-69b3ad820bff" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="6866d4e0-570c-4fd4-975a-bfe8d467eef2" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="d8bd41ba-a60e-4c23-a12d-7d18832e3b21" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="9c0a93a6-e320-45e7-8e7d-50bba97c5f8f" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="cd0df2da-73bf-4374-9ad7-9d724cd98f49" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="70ec1e00-47c4-4b4d-a72e-62bd584913ce" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="2796ba3f-1836-410c-a57c-47fa83eafe42" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="8e44e5c0-5a37-4644-88a9-d311993a301b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="615c1ca8-d2c3-4a9c-bed4-b07890b6f370" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="16375175-e070-4444-bc42-b97d2a95228b" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Count of Selling Productivity FYTD Live " uniqueId="6993c3cc-d7db-4af6-a4e1-624f13714fa0" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="370f1120-48ca-42b7-a270-68d01e671397" isEnabled="True">
                  <Value>with ctet1 as (
Select sum (fs.[Net Commission]) SellingComm ,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
and fs.DIM_DATE_KEY between '20190401' and '20200331'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),
ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,l.LISTING_NUMBER
from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
--and fs.[Listing Number]='787230'
group by l.LISTING_NUMBER  ),
ctet3 as (
select iif(fulllisting=0,0,SellingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2
on ctet1.[Listing Number]=ctet2.LISTING_NUMBER
)
select sum(ctet3.ProductivityPerlisting) Count_of_Selling_Productivity_Rolling_12_Months_Live FROM ctet3

</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="e52e3b39-fcc0-40c5-bb0b-3c13312eaa5e" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({TRUE}, 'Date'[Is Last Financial Year])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Is Last Financial Year],
      __DS0FilterTable,
      "Count_of_Selling_Productivity_FYTD_Live_", 'Measure'[Count of Selling Productivity FYTD(Live)]
    ),
    [Count_of_Selling_Productivity_FYTD_Live_],
    0,
    'Date'[Is Last Financial Year],
    1
  )

ORDER BY
  [Count_of_Selling_Productivity_FYTD_Live_] DESC, 'Date'[Is Last Financial Year]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="91f48370-32ba-4b4b-9475-229f327b46c0" isEnabled="True" leftGridProvider="693889e5-5bd4-4c4c-bad3-f3954cda5fec" rightGridProvider="460501f9-32a6-45b8-8f78-c1b44318a7bf">
                  <LeftColumns>
                    <Column index="0" columnName="Count_of_Selling_Productivity_Rolling_12_Months_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Is Last Financial Year]" typeName="System.Boolean" />
                    <Column index="1" columnName="[Count_of_Selling_Productivity_FYTD_Live_]" typeName="System.Double" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="7a404291-0645-4839-95e3-d3aa91703143" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="693889e5-5bd4-4c4c-bad3-f3954cda5fec" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="370f1120-48ca-42b7-a270-68d01e671397" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="27b598ab-85d1-435e-8e8e-f97a5443f589" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="460501f9-32a6-45b8-8f78-c1b44318a7bf" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="e52e3b39-fcc0-40c5-bb0b-3c13312eaa5e" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="c835e21e-1d29-492a-9c31-71889ef03414" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="91f48370-32ba-4b4b-9475-229f327b46c0" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Count of Selling Productivity Rolling 12 Month Live" uniqueId="e2120bbb-3ef3-451e-a823-f4f3b4cfd1be" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="c150efec-05c9-4a3b-a864-948353e9f0ff" isEnabled="True">
                  <Value>with ctet1 as (
Select sum (fs.[Net Commission]) SellingComm ,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
and fs.DIM_DATE_KEY between '20190201' and '20200131'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),
ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,l.LISTING_NUMBER
from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
--and fs.[Listing Number]='787230'
group by l.LISTING_NUMBER  ),
ctet3 as (
select iif(fulllisting=0,0,SellingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2
on ctet1.[Listing Number]=ctet2.LISTING_NUMBER
)
select sum(ctet3.ProductivityPerlisting) Count_of_Selling_Productivity_Rolling_12_Months_Live FROM ctet3

</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="72223513-875f-49d0-bfef-70a454e7ca42" isEnabled="True">
                  <Value>// DAX Query
DEFINE
  VAR __DS0FilterTable = 
    TREATAS({"January"}, 'Date'[Calendar Month Name])

  VAR __DS0FilterTable2 = 
    FILTER(KEEPFILTERS(VALUES('Date'[Calendar Year])), 'Date'[Calendar Year] = 2020)

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Calendar Month Name],
      'Date'[Financial Month Number],
      'Date'[Calendar Year],
      __DS0FilterTable,
      __DS0FilterTable2,
      "Count_of_Selling_Productivity_Rolling_12_Months_Live_", ROUNDDOWN(('Measure'[Count of Selling Productivity Rolling 12 Months(Live)]),2)
    ),
    'Date'[Financial Month Number],
    1,
    'Date'[Calendar Month Name],
    1,
    'Date'[Calendar Year],
    1
  )

ORDER BY
  'Date'[Financial Month Number], 'Date'[Calendar Month Name], 'Date'[Calendar Year]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="f5e9a24d-c944-4775-a597-5d837a1755cd" isEnabled="True" leftGridProvider="fab42553-b5d8-47eb-b58a-cf36a3b8d1ab" rightGridProvider="6bd56451-42cc-48b8-97cc-a4dd20d7b718">
                  <LeftColumns>
                    <Column index="0" columnName="Count_of_Selling_Productivity_Rolling_12_Months_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Calendar Month Name]" typeName="System.String" />
                    <Column index="1" columnName="Date[Financial Month Number]" typeName="System.Int64" />
                    <Column index="2" columnName="Date[Calendar Year]" typeName="System.Int64" />
                    <Column index="3" columnName="[Count_of_Selling_Productivity_Rolling_12_Months_Live_]" typeName="System.Double" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="9bd29123-db09-4f87-8a84-9d018b3c71e2" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="fab42553-b5d8-47eb-b58a-cf36a3b8d1ab" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="c150efec-05c9-4a3b-a864-948353e9f0ff" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="c407e1a5-b1c7-4378-bdcc-b41794654172" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="6bd56451-42cc-48b8-97cc-a4dd20d7b718" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="72223513-875f-49d0-bfef-70a454e7ca42" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="bd20edd9-9e64-41d4-9503-9552bb23d3f8" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="f5e9a24d-c944-4775-a597-5d837a1755cd" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average GCI Per Sale FYTD Live" uniqueId="d6ac7f9d-c0fb-4ae1-8217-51be05eba603" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="df9b9f58-657a-4c66-b9c9-64b8fbe176f9" isEnabled="True">
                  <Value>with ctet1 as (
Select sum (fs.[Net Commission]) SellingComm,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
and fs.DIM_DATE_KEY between '20190401' and '20200331'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),

ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,fs.[Listing Number] 
from viewFactCommission fs
join dw.dimSales s 
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
--and fs.[Listing Number]='787230'
--and fs.DIM_DATE_KEY between '20200401' and '20210331'
group by fs.[Listing Number]  )
,
ctet3 as (
select iif(fulllisting=0,0,SellingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2 
on ctet1.[Listing Number]=ctet2.[Listing Number]
),

ctet4 as (
select round(sum(ctet3.ProductivityPerlisting) ,2) Count_of_Selling_Productivity_Rolling_12Month_live from ctet3 )
,

ctet5 as (
select SUM(NET_COMMISSION) Total_GCI_From_Selling_Trans_Rolling_12_Months
 from dw.factSalesCommission fs
 join dw.dimSales s
 on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
 where 
 --COMMISSION_TYPE_CODE='S'
 [COMMISSION_TYPE_NAME]='Selling Commission'
 and s.IS_SALECLEARED=1
  and DIM_DATE_FINALISED_KEY between '20190401' AND '20200331'

  )
  
  SELECT ROUND((Total_GCI_From_Selling_Trans_Rolling_12_Months/Count_of_Selling_Productivity_Rolling_12Month_live),3,2)
  as Average_GCI_Per_Listing_FYTD_Live
   from ctet4 join ctet5 on 1=1  




</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="95b112e5-b16b-4ec9-829d-93b3d2518284" isEnabled="True" leftGridProvider="49a55659-59cd-476b-9c93-8afb44ae1640" rightGridProvider="5b1e1f75-3a2c-4f92-ad8e-00485c8b4316">
                  <LeftColumns>
                    <Column index="0" columnName="Average_GCI_Per_Listing_FYTD_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Financial Year (Calendar)]" typeName="System.String" />
                    <Column index="1" columnName="[Average_GCI_Per_Sale_FYTD_Live_]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="9c9596b6-9663-454c-ae71-8c20f5be4e4f" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({"2019-2020"}, 'Date'[Financial Year (Calendar)])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Financial Year (Calendar)],
      __DS0FilterTable,
      "Average_GCI_Per_Sale_FYTD_Live_", 'Measure'[Average GCI Per Sale FYTD(Live)]
    ),
    [Average_GCI_Per_Sale_FYTD_Live_],
    0,
    'Date'[Financial Year (Calendar)],
    1
  )

ORDER BY
  [Average_GCI_Per_Sale_FYTD_Live_] DESC, 'Date'[Financial Year (Calendar)]
</Value>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="9479c986-6642-4877-8088-43ba12e2672f" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="49a55659-59cd-476b-9c93-8afb44ae1640" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="df9b9f58-657a-4c66-b9c9-64b8fbe176f9" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="930fc504-9094-46d6-8cde-4440c089b35c" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="5b1e1f75-3a2c-4f92-ad8e-00485c8b4316" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="9c9596b6-9663-454c-ae71-8c20f5be4e4f" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="91716662-8d97-480e-bce1-ff0d504a77bc" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="95b112e5-b16b-4ec9-829d-93b3d2518284" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average GCI Per Listing FYTD Live" uniqueId="2b1c1056-c4b1-48e4-960a-24f843109237" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="ef806081-7431-4156-933f-6517b9484ed7" isEnabled="True">
                  <Value>with ctet1 as (
Select SUM (fs.[Net Commission]) ListingComm ,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
and fs.DIM_DATE_KEY between '20190401' and '20200331'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),

ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,fs.[Listing Number] 
from viewFactCommission fs
join dw.dimSales s 
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
--and fs.[Listing Number]='787230'
--and fs.DIM_DATE_KEY between '20200401' and '20210331'
group by fs.[Listing Number]  )
,
ctet3 as (
select iif(fulllisting=0,0,ListingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2 
on ctet1.[Listing Number]=ctet2.[Listing Number]
),

ctet4 as (
select round(sum(ctet3.ProductivityPerlisting) ,2) Count_of_Listing_Productivity_Rolling_12Month_live from ctet3 )
,

ctet5 as (
select SUM(NET_COMMISSION) Total_GCI_From_Listing_Trans_Rolling_12_Months
 from dw.factSalesCommission fs
 join dw.dimSales s
 on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
 where 
 --COMMISSION_TYPE_CODE='S'
 [COMMISSION_TYPE_NAME]='Listing Commission'
 and s.IS_SALECLEARED=1
  and DIM_DATE_FINALISED_KEY between '20190401' AND '20200331'

  )
  
  SELECT ROUND((Total_GCI_From_Listing_Trans_Rolling_12_Months/Count_of_Listing_Productivity_Rolling_12Month_live),3,2)
  as Average_GCI_Per_Listing_FYTD_Live
   from ctet4 join ctet5 on 1=1  




</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="f099195a-abad-43de-ad7e-1987aa6d0800" isEnabled="True" leftGridProvider="a4b7e3e8-8e7a-42bf-824e-fa4bf3a8fb70" rightGridProvider="62b5a2ae-0175-4694-a831-676225d86f46">
                  <LeftColumns>
                    <Column index="0" columnName="Average_GCI_Per_Listing_FYTD_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Financial Year (Calendar)]" typeName="System.String" />
                    <Column index="1" columnName="[Average_GCI_Per_Listing_FYTD_Live_]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="192dc5b8-a6e7-4695-9717-be64305f205c" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({"2019-2020"}, 'Date'[Financial Year (Calendar)])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Financial Year (Calendar)],
      __DS0FilterTable,
      "Average_GCI_Per_Listing_FYTD_Live_", 'Measure'[Average GCI Per Listing FYTD(Live)]
    ),
    [Average_GCI_Per_Listing_FYTD_Live_],
    0,
    'Date'[Financial Year (Calendar)],
    1
  )

ORDER BY
  [Average_GCI_Per_Listing_FYTD_Live_] DESC, 'Date'[Financial Year (Calendar)]
</Value>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="321ac401-f75b-4309-b46a-8a3e92ec9943" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="a4b7e3e8-8e7a-42bf-824e-fa4bf3a8fb70" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="ef806081-7431-4156-933f-6517b9484ed7" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="2f87391d-8842-4bb6-a3cd-1c97a98ea906" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="62b5a2ae-0175-4694-a831-676225d86f46" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="192dc5b8-a6e7-4695-9717-be64305f205c" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="13817d86-5f55-4784-9b4c-8fbe666cc234" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="f099195a-abad-43de-ad7e-1987aa6d0800" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Count of Listing Productivity Rolling 12 Month Live" uniqueId="cd8457f1-2e22-4ca2-b34e-32db164b35ad" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="645d53a4-4f72-4399-9570-b24c2cdb94e3" isEnabled="True">
                  <Value>with ctet1 as (
Select SUM (fs.[Net Commission]) ListingComm ,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
and fs.DIM_DATE_KEY between '20190201' and '20200131'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),
ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,l.LISTING_NUMBER
from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
--and fs.[Listing Number]='787230'
group by l.LISTING_NUMBER  ),
ctet3 as (
select iif(fulllisting=0,0,ListingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2
on ctet1.[Listing Number]=ctet2.LISTING_NUMBER
)
select sum(ctet3.ProductivityPerlisting) Count_of_Listing_Productivity_Rolling_12_Months_Live FROM ctet3

</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="d7b527ba-b331-4421-af75-ec2592f60a05" isEnabled="True">
                  <Value>// DAX Query
DEFINE
  VAR __DS0FilterTable = 
    TREATAS({"January"}, 'Date'[Calendar Month Name])

  VAR __DS0FilterTable2 = 
    FILTER(KEEPFILTERS(VALUES('Date'[Calendar Year])), 'Date'[Calendar Year] = 2020)

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Calendar Month Name],
      'Date'[Financial Month Number],
      'Date'[Calendar Year],
      __DS0FilterTable,
      __DS0FilterTable2,
      "Count_of_Listing_Productivity_Rolling_12_Months_Live_", ROUNDDOWN(('Measure'[Count of Listing Productivity Rolling 12 Months(Live)]),2)
    ),
    'Date'[Financial Month Number],
    1,
    'Date'[Calendar Month Name],
    1,
    'Date'[Calendar Year],
    1
  )

ORDER BY
  'Date'[Financial Month Number], 'Date'[Calendar Month Name], 'Date'[Calendar Year]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="77dd3d48-b112-45fe-897a-e70f09d86d6b" isEnabled="True" leftGridProvider="7ace515b-b410-4aed-bdcd-e61cb315ddab" rightGridProvider="2736c4c6-0645-4a3a-a2f0-002ec42caffe">
                  <LeftColumns>
                    <Column index="0" columnName="Count_of_Listing_Productivity_Rolling_12_Months_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Calendar Month Name]" typeName="System.String" />
                    <Column index="1" columnName="Date[Financial Month Number]" typeName="System.Int64" />
                    <Column index="2" columnName="Date[Calendar Year]" typeName="System.Int64" />
                    <Column index="3" columnName="[Count_of_Listing_Productivity_Rolling_12_Months_Live_]" typeName="System.Double" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="a4c5ace9-8301-49f7-84cd-65c40bc9ba42" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="7ace515b-b410-4aed-bdcd-e61cb315ddab" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="645d53a4-4f72-4399-9570-b24c2cdb94e3" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="74c23aa8-56c5-459a-ad48-ae74219e5171" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="2736c4c6-0645-4a3a-a2f0-002ec42caffe" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="d7b527ba-b331-4421-af75-ec2592f60a05" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="2502bd30-6c26-4986-9ba3-c5e8563727a1" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="77dd3d48-b112-45fe-897a-e70f09d86d6b" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Count of Listing Productivity FYTD Live" uniqueId="a001f612-aed3-4273-b12b-587e825d3164" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="66c122f6-655b-4b8d-9213-4efc5eba46ec" isEnabled="True">
                  <Value>with ctet1 as (
Select SUM (fs.[Net Commission]) ListingComm ,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
and fs.DIM_DATE_KEY between '20190401' and '20200331'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),
ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,l.LISTING_NUMBER
from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
--and fs.[Listing Number]='787230'
group by l.LISTING_NUMBER  ),
ctet3 as (
select iif(fulllisting=0,0,ListingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2
on ctet1.[Listing Number]=ctet2.LISTING_NUMBER
)
select SUM(ctet3.ProductivityPerlisting) Count_of_Listing_Productivity_FYTD_Live FROM ctet3

</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="1e196568-d1b0-4ed9-92d6-00a17ad1420b" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({TRUE}, 'Date'[Is Last Financial Year])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Is Last Financial Year],
      __DS0FilterTable,
      "Count_of_Listing_Productivity_FYTD_Live_", 'Measure'[Count of Listing Productivity FYTD(Live)]
    ),
    [Count_of_Listing_Productivity_FYTD_Live_],
    0,
    'Date'[Is Last Financial Year],
    1
  )

ORDER BY
  [Count_of_Listing_Productivity_FYTD_Live_] DESC, 'Date'[Is Last Financial Year]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="658f5d64-b636-403b-abd6-e0c1b8041ad0" isEnabled="True" leftGridProvider="f1648351-7e36-4a70-91cb-a7bb7383c1e6" rightGridProvider="28361b3b-912f-40ae-bd4e-6c2808f1de1d">
                  <LeftColumns>
                    <Column index="0" columnName="Count_of_Listing_Productivity_FYTD_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Is Last Financial Year]" typeName="System.Boolean" />
                    <Column index="1" columnName="[Count_of_Listing_Productivity_FYTD_Live_]" typeName="System.Double" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="cc206a7d-9047-4973-9f92-5a9a20f1c40c" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="f1648351-7e36-4a70-91cb-a7bb7383c1e6" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="66c122f6-655b-4b8d-9213-4efc5eba46ec" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="624d0b74-9c31-4d5f-a93b-ba181f2aa9a0" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="28361b3b-912f-40ae-bd4e-6c2808f1de1d" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="1e196568-d1b0-4ed9-92d6-00a17ad1420b" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="658f5d64-b636-403b-abd6-e0c1b8041ad0" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average GCI Per Sale Rolling 12 Months Live" uniqueId="d1d5d10f-d6a4-4817-85ee-5b4139d8df6e" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="9db5984e-727d-4197-9188-5d85f897f727" isEnabled="True">
                  <Value>with ctet1 as (
Select sum (fs.[Net Commission]) SellingComm,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
and fs.DIM_DATE_KEY between '20190201' and '20200131'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),

ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,fs.[Listing Number] 
from viewFactCommission fs
join dw.dimSales s 
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Selling Commission'
--and fs.[Listing Number]='787230'
--and fs.DIM_DATE_KEY between '20200401' and '20210331'
group by fs.[Listing Number]  )
,
ctet3 as (
select iif(fulllisting=0,0,SellingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2 
on ctet1.[Listing Number]=ctet2.[Listing Number]
),

ctet4 as (
select round(sum(ctet3.ProductivityPerlisting) ,2) Count_of_Selling_Productivity_Rolling_12Month_live from ctet3 )
,

ctet5 as (
select SUM(NET_COMMISSION) Total_GCI_From_Selling_Trans_Rolling_12_Months
 from dw.factSalesCommission fs
 join dw.dimSales s
 on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
 where 
 --COMMISSION_TYPE_CODE='S'
 [COMMISSION_TYPE_NAME]='Selling Commission'
 and s.IS_SALECLEARED=1
  and DIM_DATE_FINALISED_KEY between '20190201' AND '20200131'

  )
  
  SELECT ROUND((Total_GCI_From_Selling_Trans_Rolling_12_Months/Count_of_Selling_Productivity_Rolling_12Month_live),3,2)
  as Average_GCI_Per_Selling_rolling_12_month_Live
   from ctet4 join ctet5 on 1=1  




</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="056ed04c-389c-4f8b-9fd5-8b8e3e92c800" isEnabled="True" leftGridProvider="5412d7e8-7e47-4991-94e8-1b1f04cee31c" rightGridProvider="af1edc81-0918-4d93-a879-30fe1c0aefe1">
                  <LeftColumns>
                    <Column index="0" columnName="Average_GCI_Per_Selling_rolling_12_month_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Calendar Month Name]" typeName="System.String" />
                    <Column index="1" columnName="Date[Financial Month Number]" typeName="System.Int64" />
                    <Column index="2" columnName="Date[Calendar Year]" typeName="System.Int64" />
                    <Column index="3" columnName="[Average_GCI_Per_Sale_Rolling_12_Months_Live_]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="82c3046a-199d-407a-87f0-c977bbb7f6ef" isEnabled="True">
                  <Value>// DAX Query
DEFINE
  VAR __DS0FilterTable = 
    TREATAS({"January"}, 'Date'[Calendar Month Name])

  VAR __DS0FilterTable2 = 
    FILTER(KEEPFILTERS(VALUES('Date'[Calendar Year])), 'Date'[Calendar Year] = 2020)

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Calendar Month Name],
      'Date'[Financial Month Number],
      'Date'[Calendar Year],
      __DS0FilterTable,
      __DS0FilterTable2,
      "Average_GCI_Per_Sale_Rolling_12_Months_Live_", 'Measure'[Average GCI Per Sale Rolling 12 Months(Live)]
    ),
    'Date'[Financial Month Number],
    1,
    'Date'[Calendar Month Name],
    1,
    'Date'[Calendar Year],
    1
  )

ORDER BY
  'Date'[Financial Month Number], 'Date'[Calendar Month Name], 'Date'[Calendar Year]
</Value>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="896f2ef5-0b5f-4ef8-93ab-6c34bc09605c" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="5412d7e8-7e47-4991-94e8-1b1f04cee31c" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="9db5984e-727d-4197-9188-5d85f897f727" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="6852cd93-01a1-4afa-b072-a419a675d81c" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="af1edc81-0918-4d93-a879-30fe1c0aefe1" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="82c3046a-199d-407a-87f0-c977bbb7f6ef" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="d8e33a13-aa81-4ab7-a232-19bf0a64ed8f" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="056ed04c-389c-4f8b-9fd5-8b8e3e92c800" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average GCI Per Listing Rolling 12 Months Live" uniqueId="6eee9250-af2c-43a0-b6d9-4f8c82c8d868" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="e34ac997-5d12-42ce-9363-bb6a21edc0f9" isEnabled="True">
                  <Value>with ctet1 as (
Select SUM (fs.[Net Commission]) ListingComm,fs.[Listing Number],s.DIM_SALES_KEY from viewFactCommission fs
join dw.dimSales s
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
and fs.DIM_DATE_KEY between '20190201' and '20200131'
--and [Listing Number]='787230'
group by fs.[Listing Number] ,s.DIM_SALES_KEY
),

ctet2 as
(
Select sum (fs.[Net Commission]) fulllisting,fs.[Listing Number] 
from viewFactCommission fs
join dw.dimSales s 
on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
join dw.dimListing l
on l.DIM_LISTING_KEY=fs.DIM_LISTING_KEY
where s.IS_SALECLEARED=1
and fs.[Commission Type]='Listing Commission'
--and fs.[Listing Number]='787230'
--and fs.DIM_DATE_KEY between '20200401' and '20210331'
group by fs.[Listing Number]  )
,
ctet3 as (
select iif(fulllisting=0,0,ListingComm/fulllisting) ProductivityPerlisting,
[ctet1].[Listing Number]  from ctet1 left join ctet2 
on ctet1.[Listing Number]=ctet2.[Listing Number]
),

ctet4 as (
select round(sum(ctet3.ProductivityPerlisting) ,2) Count_of_Listing_Productivity_Rolling_12Month_live from ctet3 )
,

ctet5 as (
select SUM(NET_COMMISSION) Total_GCI_From_Listing_Trans_Rolling_12_Months
 from dw.factSalesCommission fs
 join dw.dimSales s
 on fs.DIM_SALES_KEY=s.DIM_SALES_KEY
 where 
 --COMMISSION_TYPE_CODE='S'
 [COMMISSION_TYPE_NAME]='Listing Commission'
 and s.IS_SALECLEARED=1
  and DIM_DATE_FINALISED_KEY between '20190201' AND '20200131'

  )
  
  SELECT ROUND((Total_GCI_From_Listing_Trans_Rolling_12_Months/Count_of_Listing_Productivity_Rolling_12Month_live),3,2)
  as Average_GCI_Per_Selling_rolling_12_month_Live
   from ctet4 join ctet5 on 1=1  




</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="be7d93a2-8cce-4778-81f2-e3f4bc7a20fc" isEnabled="True" leftGridProvider="5854b603-1473-451b-99eb-83e08152d7bd" rightGridProvider="6959c07c-450d-48ca-bdf9-4b401cc62932">
                  <LeftColumns>
                    <Column index="0" columnName="Average_GCI_Per_Selling_rolling_12_month_Live" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Calendar Month Name]" typeName="System.String" />
                    <Column index="1" columnName="Date[Financial Month Number]" typeName="System.Int64" />
                    <Column index="2" columnName="Date[Calendar Year]" typeName="System.Int64" />
                    <Column index="3" columnName="[Average_GCI_Per_Listing_Rolling_12_Months_Live_]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="d921d930-7a14-4810-ba9f-40a678fa598f" isEnabled="True">
                  <Value>// DAX Query
DEFINE
  VAR __DS0FilterTable = 
    TREATAS({"January"}, 'Date'[Calendar Month Name])

  VAR __DS0FilterTable2 = 
    FILTER(KEEPFILTERS(VALUES('Date'[Calendar Year])), 'Date'[Calendar Year] = 2020)

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Calendar Month Name],
      'Date'[Financial Month Number],
      'Date'[Calendar Year],
      __DS0FilterTable,
      __DS0FilterTable2,
      "Average_GCI_Per_Listing_Rolling_12_Months_Live_", 'Measure'[Average GCI Per Listing Rolling 12 Months(Live)]
    ),
    'Date'[Financial Month Number],
    1,
    'Date'[Calendar Month Name],
    1,
    'Date'[Calendar Year],
    1
  )

ORDER BY
  'Date'[Financial Month Number], 'Date'[Calendar Month Name], 'Date'[Calendar Year]
</Value>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="86bf5ac7-328d-487f-826e-2917dc0a4bea" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="5854b603-1473-451b-99eb-83e08152d7bd" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="e34ac997-5d12-42ce-9363-bb6a21edc0f9" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="2b25ac32-2fe1-45f3-8a07-d239aab5609a" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="6959c07c-450d-48ca-bdf9-4b401cc62932" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="d921d930-7a14-4810-ba9f-40a678fa598f" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="094bf6f8-968b-4bb8-8b48-334ae49bce17" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="be7d93a2-8cce-4778-81f2-e3f4bc7a20fc" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
      </Tests>
      <TestTeardownSteps />
      <GroupTeardownSteps />
    </TestGroup>
  </TestGroups>
  <ParameterSet isServerIntegrationFile="False">
    <Parameters>
      <Parameter name="PublishResultsToLegiTestServer" type="System.Boolean" value="True" />
    </Parameters>
    <Mappings />
  </ParameterSet>
  <AnnotationTypes>
    <AnnotationType typeName="LegiTest.UserErrorMessage" description="User Error Message" />
    <AnnotationType typeName="LegiTest.Description" description="Description" />
    <AnnotationType typeName="LegiTest.ResolutionSteps" description="Resolution Steps" />
  </AnnotationTypes>
</TestSuite>