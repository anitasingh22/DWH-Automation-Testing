// <auto-generated />
namespace DWH_Automation_Testing.DanElzerAverageCommission_Output
{
    using global::PragmaticWorks.LegiTest.Contracts.Runtime;
    using global::System;
    using global::PragmaticWorks.LegiTest.Runtime;
    using global::NUnit.Framework;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::PragmaticWorks.LegiTest.Runtime.Models;
    using global::PragmaticWorks.LegiTest.DataComparison.Helper;
    using global::PragmaticWorks.Common.Sql.RowStoreGrid;
    using global::PragmaticWorks.LegiTest.Runtime.Exceptions;
    using global::PragmaticWorks.LegiTest.DataComparison.Comparison;
    using global::System.Globalization;
    using global::System.CodeDom.Compiler;
    
    
    // This class was auto-generated by LegiTest
    // Modifications to this class will be over-written if the test suite is regenerated.
    [TestFixture]
    [GeneratedCode("PragmaticWorks.LegiTest", "2020.1.3.0")]
    [UniqueId("7594a693-f950-4302-a702-37eb1620d869")]
    public partial class DanElzerAverageCommission
    {
        
        // Test resources used for passing resources between steps
        private IResourceProvider _testResources;
        
        // Test state tracker used to co-ordinate pushing results to SentryOne Test
        static ITestStateTracker testStateTracker;
        
        // Parameter provider used to find parameters for individual elements
        static IParameterProvider parameterProvider;
        
        static partial void BeforeTest(string testName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTest(string testName, Dictionary<string, object> testResources);
        static partial void BeforeTestElement(string testName, string elementName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTestElement(string testName, string elementName, Dictionary<string, object> testResources);
        
        static DanElzerAverageCommission()
        {
            // Create the parameter provider used to find parameters for individual elements.
            parameterProvider = new ParameterProvider(new Guid("ae79b540-c994-4d59-9294-b3d13bfa03a9"), typeof(DanElzerAverageCommission));
        }
        
        [TestFixtureSetUp]
        public static void GroupSetup()
        {
            // Print debug information to the console to aid with parameter debugging.
            ParameterProvider.PrintDebugInformation(parameterProvider);
            // Create the test state tracker to track the group's run state against SentryOne Test.
            testStateTracker = new TestStateTracker(typeof(DanElzerAverageCommission), Resources.TestManifest_DanElzerAverageCommission_7594a693f9504302a70237eb1620d869, TestAssemblyInformation.AssemblyTestCount, TestAssemblyInformation.SuiteTestCounts, parameterProvider);
            // Inform the server that the test group has started.
            testStateTracker.RegisterGroupStarted();
        }
        
        [SetUp]
        public void Setup()
        {
            // Create the test resources
            _testResources = new ResourceProvider();
            // Make the test resources available to the parameter provider
            parameterProvider.SetResourcesSource(_testResources);
            // Inform the server that the test has started.
            testStateTracker.RegisterTestStarted(TestContext.CurrentContext.Test.Name);
        }
        
        [TearDown]
        public void Teardown()
        {
            // Inform the server that the test has ended.
            testStateTracker.RegisterTestEnded(TestContext.CurrentContext.Test.Name, (TestContext.CurrentContext.Result.Status == TestStatus.Passed), (TestContext.CurrentContext.Result.Status == TestStatus.Failed), (TestContext.CurrentContext.Result.Status == TestStatus.Inconclusive), (TestContext.CurrentContext.Result.Status == TestStatus.Skipped));
        }
        
        [TestFixtureTearDown]
        public static void GroupTeardown()
        {
            // Inform the server that the test group has ended.
            testStateTracker.RegisterGroupEnded();
        }
        
        // Implementation for test Sum of Full Selling Commision
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("5412ef34-58a2-4f42-a963-a291d2897472")]
        public void SumofFullSellingCommision()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Sum of Full Selling Commision", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, SumofFullSellingCommision_ExecutionTrack0, SumofFullSellingCommision_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids", SumofFullSellingCommision_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Sum of Full Selling Commision", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Count of Selling Productivity FYTD Live 
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("6993c3cc-d7db-4af6-a4e1-624f13714fa0")]
        public void CountofSellingProductivityFYTDLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Count of Selling Productivity FYTD Live ", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, CountofSellingProductivityFYTDLive_ExecutionTrack0, CountofSellingProductivityFYTDLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids", CountofSellingProductivityFYTDLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Count of Selling Productivity FYTD Live ", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Count of Selling Productivity Rolling 12 Month Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("e2120bbb-3ef3-451e-a823-f4f3b4cfd1be")]
        public void CountofSellingProductivityRolling12MonthLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Count of Selling Productivity Rolling 12 Month Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, CountofSellingProductivityRolling12MonthLive_ExecutionTrack0, CountofSellingProductivityRolling12MonthLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids", CountofSellingProductivityRolling12MonthLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Count of Selling Productivity Rolling 12 Month Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average GCI Per Sale FYTD Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("d6ac7f9d-c0fb-4ae1-8217-51be05eba603")]
        public void AverageGCIPerSaleFYTDLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average GCI Per Sale FYTD Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageGCIPerSaleFYTDLive_ExecutionTrack0, AverageGCIPerSaleFYTDLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids", AverageGCIPerSaleFYTDLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average GCI Per Sale FYTD Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average GCI Per Listing FYTD Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("2b1c1056-c4b1-48e4-960a-24f843109237")]
        public void AverageGCIPerListingFYTDLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average GCI Per Listing FYTD Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageGCIPerListingFYTDLive_ExecutionTrack0, AverageGCIPerListingFYTDLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids", AverageGCIPerListingFYTDLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average GCI Per Listing FYTD Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Count of Listing Productivity Rolling 12 Month Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("cd8457f1-2e22-4ca2-b34e-32db164b35ad")]
        public void CountofListingProductivityRolling12MonthLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Count of Listing Productivity Rolling 12 Month Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, CountofListingProductivityRolling12MonthLive_ExecutionTrack0, CountofListingProductivityRolling12MonthLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids", CountofListingProductivityRolling12MonthLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Count of Listing Productivity Rolling 12 Month Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Count of Listing Productivity FYTD Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("a001f612-aed3-4273-b12b-587e825d3164")]
        public void CountofListingProductivityFYTDLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Count of Listing Productivity FYTD Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, CountofListingProductivityFYTDLive_ExecutionTrack0, CountofListingProductivityFYTDLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids", CountofListingProductivityFYTDLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Count of Listing Productivity FYTD Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average GCI Per Sale Rolling 12 Months Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("d1d5d10f-d6a4-4817-85ee-5b4139d8df6e")]
        public void AverageGCIPerSaleRolling12MonthsLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average GCI Per Sale Rolling 12 Months Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageGCIPerSaleRolling12MonthsLive_ExecutionTrack0, AverageGCIPerSaleRolling12MonthsLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids", AverageGCIPerSaleRolling12MonthsLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average GCI Per Sale Rolling 12 Months Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average GCI Per Listing Rolling 12 Months Live
        [Category("Dan Elzer Average Commission")]
        [Test]
        [UniqueId("6eee9250-af2c-43a0-b6d9-4f8c82c8d868")]
        public void AverageGCIPerListingRolling12MonthsLive()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average GCI Per Listing Rolling 12 Months Live", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageGCIPerListingRolling12MonthsLive_ExecutionTrack0, AverageGCIPerListingRolling12MonthsLive_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids", AverageGCIPerListingRolling12MonthsLive_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average GCI Per Listing Rolling 12 Months Live", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Sum of Full Selling Commision
        private void SumofFullSellingCommision_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("6866d4e0-570c-4fd4-975a-bfe8d467eef2"), "Execute Expected Query", TestStepType.Test, SumofFullSellingCommision_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Sum of Full Selling Commision
        private void SumofFullSellingCommision_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Full Selling Commision", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH stage
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHstage_9c0a93a6e32045e78e7d50bba97c5f8f);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9c0a93a6-e320-45e7-8e7d-50bba97c5f8f"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9c0a93a6-e320-45e7-8e7d-50bba97c5f8f"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("d8bd41ba-a60e-4c23-a12d-7d18832e3b21"), "Value", Resources.TestResource_ExpectedQuery_d8bd41baa60e4c23a12d7d18832e3b21);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("6866d4e0-570c-4fd4-975a-bfe8d467eef2"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("6866d4e0-570c-4fd4-975a-bfe8d467eef2"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("6866d4e0-570c-4fd4-975a-bfe8d467eef2"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Sum of Full Selling Commision", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Full Selling Commision", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Sum of Full Selling Commision
        private void SumofFullSellingCommision_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("70ec1e00-47c4-4b4d-a72e-62bd584913ce"), "Execute Actual Query", TestStepType.Test, SumofFullSellingCommision_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Sum of Full Selling Commision
        private void SumofFullSellingCommision_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Full Selling Commision", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Stage
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixStage_8e44e5c05a37464488a9d311993a301b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("8e44e5c0-5a37-4644-88a9-d311993a301b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("8e44e5c0-5a37-4644-88a9-d311993a301b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("2796ba3f-1836-410c-a57c-47fa83eafe42"), "Value", Resources.TestResource_ActualQuery_2796ba3f1836410ca57c47fa83eafe42);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("70ec1e00-47c4-4b4d-a72e-62bd584913ce"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("70ec1e00-47c4-4b4d-a72e-62bd584913ce"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("70ec1e00-47c4-4b4d-a72e-62bd584913ce"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Sum of Full Selling Commision", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Full Selling Commision", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Sum of Full Selling Commision
        private void SumofFullSellingCommision_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Full Selling Commision", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_16375175e0704444bc42b97d2a95228b);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("615c1ca8-d2c3-4a9c-bed4-b07890b6f370"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Sum of Full Selling Commision", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Sum of Full Selling Commision", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Full Selling Commision", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Count of Selling Productivity FYTD Live 
        private void CountofSellingProductivityFYTDLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("693889e5-5bd4-4c4c-bad3-f3954cda5fec"), "Execute Expected Query", TestStepType.Test, CountofSellingProductivityFYTDLive_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Count of Selling Productivity FYTD Live 
        private void CountofSellingProductivityFYTDLive_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Selling Productivity FYTD Live ", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("370f1120-48ca-42b7-a270-68d01e671397"), "Value", Resources.TestResource_ExpectedQuery_370f112048ca42b7a27068d01e671397);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("693889e5-5bd4-4c4c-bad3-f3954cda5fec"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("693889e5-5bd4-4c4c-bad3-f3954cda5fec"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("693889e5-5bd4-4c4c-bad3-f3954cda5fec"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Selling Productivity FYTD Live ", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Selling Productivity FYTD Live ", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Count of Selling Productivity FYTD Live 
        private void CountofSellingProductivityFYTDLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("460501f9-32a6-45b8-8f78-c1b44318a7bf"), "Execute Actual Query", TestStepType.Test, CountofSellingProductivityFYTDLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Count of Selling Productivity FYTD Live 
        private void CountofSellingProductivityFYTDLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Selling Productivity FYTD Live ", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("e52e3b39-fcc0-40c5-bb0b-3c13312eaa5e"), "Value", Resources.TestResource_ActualQuery_e52e3b39fcc040c5bb0b3c13312eaa5e);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("460501f9-32a6-45b8-8f78-c1b44318a7bf"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("460501f9-32a6-45b8-8f78-c1b44318a7bf"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("460501f9-32a6-45b8-8f78-c1b44318a7bf"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Selling Productivity FYTD Live ", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Selling Productivity FYTD Live ", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Count of Selling Productivity FYTD Live 
        private void CountofSellingProductivityFYTDLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Selling Productivity FYTD Live ", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_91f4837032ba4b4b9475229f327b46c0);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c835e21e-1d29-492a-9c31-71889ef03414"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Count of Selling Productivity FYTD Live ", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Count of Selling Productivity FYTD Live ", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Selling Productivity FYTD Live ", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Count of Selling Productivity Rolling 12 Month Live
        private void CountofSellingProductivityRolling12MonthLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("fab42553-b5d8-47eb-b58a-cf36a3b8d1ab"), "Execute Expected Query", TestStepType.Test, CountofSellingProductivityRolling12MonthLive_ExecuteExpectedQuer);
        }
        
        // Implementation for step Execute Expected Query for Count of Selling Productivity Rolling 12 Month Live
        private void CountofSellingProductivityRolling12MonthLive_ExecuteExpectedQuer()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Selling Productivity Rolling 12 Month Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("c150efec-05c9-4a3b-a864-948353e9f0ff"), "Value", Resources.TestResource_ExpectedQuery_c150efec05c94a3ba864948353e9f0ff);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("fab42553-b5d8-47eb-b58a-cf36a3b8d1ab"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("fab42553-b5d8-47eb-b58a-cf36a3b8d1ab"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("fab42553-b5d8-47eb-b58a-cf36a3b8d1ab"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Selling Productivity Rolling 12 Month Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Selling Productivity Rolling 12 Month Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Count of Selling Productivity Rolling 12 Month Live
        private void CountofSellingProductivityRolling12MonthLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("6bd56451-42cc-48b8-97cc-a4dd20d7b718"), "Execute Actual Query", TestStepType.Test, CountofSellingProductivityRolling12MonthLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Count of Selling Productivity Rolling 12 Month Live
        private void CountofSellingProductivityRolling12MonthLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Selling Productivity Rolling 12 Month Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("72223513-875f-49d0-bfef-70a454e7ca42"), "Value", Resources.TestResource_ActualQuery_72223513875f49d0bfef70a454e7ca42);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("6bd56451-42cc-48b8-97cc-a4dd20d7b718"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("6bd56451-42cc-48b8-97cc-a4dd20d7b718"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("6bd56451-42cc-48b8-97cc-a4dd20d7b718"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Selling Productivity Rolling 12 Month Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Selling Productivity Rolling 12 Month Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Count of Selling Productivity Rolling 12 Month Live
        private void CountofSellingProductivityRolling12MonthLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Selling Productivity Rolling 12 Month Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_f5e9a24dc9444775a5975d837a1755cd);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("bd20edd9-9e64-41d4-9503-9552bb23d3f8"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Count of Selling Productivity Rolling 12 Month Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Count of Selling Productivity Rolling 12 Month Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Selling Productivity Rolling 12 Month Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average GCI Per Sale FYTD Live
        private void AverageGCIPerSaleFYTDLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("49a55659-59cd-476b-9c93-8afb44ae1640"), "Execute Expected Query", TestStepType.Test, AverageGCIPerSaleFYTDLive_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average GCI Per Sale FYTD Live
        private void AverageGCIPerSaleFYTDLive_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Sale FYTD Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("df9b9f58-657a-4c66-b9c9-64b8fbe176f9"), "Value", Resources.TestResource_ExpectedQuery_df9b9f58657a4c66b9c964b8fbe176f9);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("49a55659-59cd-476b-9c93-8afb44ae1640"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("49a55659-59cd-476b-9c93-8afb44ae1640"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("49a55659-59cd-476b-9c93-8afb44ae1640"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Sale FYTD Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Sale FYTD Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average GCI Per Sale FYTD Live
        private void AverageGCIPerSaleFYTDLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("5b1e1f75-3a2c-4f92-ad8e-00485c8b4316"), "Execute Actual Query", TestStepType.Test, AverageGCIPerSaleFYTDLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average GCI Per Sale FYTD Live
        private void AverageGCIPerSaleFYTDLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Sale FYTD Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("9c9596b6-9663-454c-ae71-8c20f5be4e4f"), "Value", Resources.TestResource_ActualQuery_9c9596b69663454cae718c20f5be4e4f);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("5b1e1f75-3a2c-4f92-ad8e-00485c8b4316"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("5b1e1f75-3a2c-4f92-ad8e-00485c8b4316"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("5b1e1f75-3a2c-4f92-ad8e-00485c8b4316"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Sale FYTD Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Sale FYTD Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average GCI Per Sale FYTD Live
        private void AverageGCIPerSaleFYTDLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Sale FYTD Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_95b112e5b16b4ec9829d93b3d2518284);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("91716662-8d97-480e-bce1-ff0d504a77bc"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Average GCI Per Sale FYTD Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Average GCI Per Sale FYTD Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Sale FYTD Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average GCI Per Listing FYTD Live
        private void AverageGCIPerListingFYTDLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("a4b7e3e8-8e7a-42bf-824e-fa4bf3a8fb70"), "Execute Expected Query", TestStepType.Test, AverageGCIPerListingFYTDLive_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average GCI Per Listing FYTD Live
        private void AverageGCIPerListingFYTDLive_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Listing FYTD Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("ef806081-7431-4156-933f-6517b9484ed7"), "Value", Resources.TestResource_ExpectedQuery_ef80608174314156933f6517b9484ed7);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("a4b7e3e8-8e7a-42bf-824e-fa4bf3a8fb70"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("a4b7e3e8-8e7a-42bf-824e-fa4bf3a8fb70"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("a4b7e3e8-8e7a-42bf-824e-fa4bf3a8fb70"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Listing FYTD Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Listing FYTD Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average GCI Per Listing FYTD Live
        private void AverageGCIPerListingFYTDLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("62b5a2ae-0175-4694-a831-676225d86f46"), "Execute Actual Query", TestStepType.Test, AverageGCIPerListingFYTDLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average GCI Per Listing FYTD Live
        private void AverageGCIPerListingFYTDLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Listing FYTD Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("192dc5b8-a6e7-4695-9717-be64305f205c"), "Value", Resources.TestResource_ActualQuery_192dc5b8a6e746959717be64305f205c);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("62b5a2ae-0175-4694-a831-676225d86f46"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("62b5a2ae-0175-4694-a831-676225d86f46"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("62b5a2ae-0175-4694-a831-676225d86f46"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Listing FYTD Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Listing FYTD Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average GCI Per Listing FYTD Live
        private void AverageGCIPerListingFYTDLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Listing FYTD Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_f099195aabad43dead7e1987aa6d0800);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("13817d86-5f55-4784-9b4c-8fbe666cc234"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Average GCI Per Listing FYTD Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Average GCI Per Listing FYTD Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Listing FYTD Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Count of Listing Productivity Rolling 12 Month Live
        private void CountofListingProductivityRolling12MonthLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("7ace515b-b410-4aed-bdcd-e61cb315ddab"), "Execute Expected Query", TestStepType.Test, CountofListingProductivityRolling12MonthLive_ExecuteExpectedQuer);
        }
        
        // Implementation for step Execute Expected Query for Count of Listing Productivity Rolling 12 Month Live
        private void CountofListingProductivityRolling12MonthLive_ExecuteExpectedQuer()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listing Productivity Rolling 12 Month Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("645d53a4-4f72-4399-9570-b24c2cdb94e3"), "Value", Resources.TestResource_ExpectedQuery_645d53a44f7243999570b24c2cdb94e3);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("7ace515b-b410-4aed-bdcd-e61cb315ddab"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("7ace515b-b410-4aed-bdcd-e61cb315ddab"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("7ace515b-b410-4aed-bdcd-e61cb315ddab"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Listing Productivity Rolling 12 Month Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listing Productivity Rolling 12 Month Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Count of Listing Productivity Rolling 12 Month Live
        private void CountofListingProductivityRolling12MonthLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("2736c4c6-0645-4a3a-a2f0-002ec42caffe"), "Execute Actual Query", TestStepType.Test, CountofListingProductivityRolling12MonthLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Count of Listing Productivity Rolling 12 Month Live
        private void CountofListingProductivityRolling12MonthLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listing Productivity Rolling 12 Month Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("d7b527ba-b331-4421-af75-ec2592f60a05"), "Value", Resources.TestResource_ActualQuery_d7b527bab3314421af75ec2592f60a05);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("2736c4c6-0645-4a3a-a2f0-002ec42caffe"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("2736c4c6-0645-4a3a-a2f0-002ec42caffe"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("2736c4c6-0645-4a3a-a2f0-002ec42caffe"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Listing Productivity Rolling 12 Month Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listing Productivity Rolling 12 Month Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Count of Listing Productivity Rolling 12 Month Live
        private void CountofListingProductivityRolling12MonthLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listing Productivity Rolling 12 Month Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_77dd3d48b11245fe897ae70f09d86d6b);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("2502bd30-6c26-4986-9ba3-c5e8563727a1"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Count of Listing Productivity Rolling 12 Month Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Count of Listing Productivity Rolling 12 Month Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listing Productivity Rolling 12 Month Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Count of Listing Productivity FYTD Live
        private void CountofListingProductivityFYTDLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("f1648351-7e36-4a70-91cb-a7bb7383c1e6"), "Execute Expected Query", TestStepType.Test, CountofListingProductivityFYTDLive_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Count of Listing Productivity FYTD Live
        private void CountofListingProductivityFYTDLive_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listing Productivity FYTD Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("66c122f6-655b-4b8d-9213-4efc5eba46ec"), "Value", Resources.TestResource_ExpectedQuery_66c122f6655b4b8d92134efc5eba46ec);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("f1648351-7e36-4a70-91cb-a7bb7383c1e6"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("f1648351-7e36-4a70-91cb-a7bb7383c1e6"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("f1648351-7e36-4a70-91cb-a7bb7383c1e6"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Listing Productivity FYTD Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listing Productivity FYTD Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Count of Listing Productivity FYTD Live
        private void CountofListingProductivityFYTDLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("28361b3b-912f-40ae-bd4e-6c2808f1de1d"), "Execute Actual Query", TestStepType.Test, CountofListingProductivityFYTDLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Count of Listing Productivity FYTD Live
        private void CountofListingProductivityFYTDLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listing Productivity FYTD Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("1e196568-d1b0-4ed9-92d6-00a17ad1420b"), "Value", Resources.TestResource_ActualQuery_1e196568d1b04ed992d600a17ad1420b);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("28361b3b-912f-40ae-bd4e-6c2808f1de1d"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("28361b3b-912f-40ae-bd4e-6c2808f1de1d"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("28361b3b-912f-40ae-bd4e-6c2808f1de1d"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Count of Listing Productivity FYTD Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listing Productivity FYTD Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Count of Listing Productivity FYTD Live
        private void CountofListingProductivityFYTDLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listing Productivity FYTD Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_658f5d64b636403babd6e0c1b8041ad0);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("c3e1bb3d-d3fc-47ce-beb6-b69ac4d0b330"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Count of Listing Productivity FYTD Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Count of Listing Productivity FYTD Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listing Productivity FYTD Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average GCI Per Sale Rolling 12 Months Live
        private void AverageGCIPerSaleRolling12MonthsLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("5412d7e8-7e47-4991-94e8-1b1f04cee31c"), "Execute Expected Query", TestStepType.Test, AverageGCIPerSaleRolling12MonthsLive_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average GCI Per Sale Rolling 12 Months Live
        private void AverageGCIPerSaleRolling12MonthsLive_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Sale Rolling 12 Months Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("9db5984e-727d-4197-9188-5d85f897f727"), "Value", Resources.TestResource_ExpectedQuery_9db5984e727d419791885d85f897f727);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("5412d7e8-7e47-4991-94e8-1b1f04cee31c"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("5412d7e8-7e47-4991-94e8-1b1f04cee31c"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("5412d7e8-7e47-4991-94e8-1b1f04cee31c"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Sale Rolling 12 Months Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Sale Rolling 12 Months Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average GCI Per Sale Rolling 12 Months Live
        private void AverageGCIPerSaleRolling12MonthsLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("af1edc81-0918-4d93-a879-30fe1c0aefe1"), "Execute Actual Query", TestStepType.Test, AverageGCIPerSaleRolling12MonthsLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average GCI Per Sale Rolling 12 Months Live
        private void AverageGCIPerSaleRolling12MonthsLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Sale Rolling 12 Months Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("82c3046a-199d-407a-87f0-c977bbb7f6ef"), "Value", Resources.TestResource_ActualQuery_82c3046a199d407a87f0c977bbb7f6ef);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("af1edc81-0918-4d93-a879-30fe1c0aefe1"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("af1edc81-0918-4d93-a879-30fe1c0aefe1"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("af1edc81-0918-4d93-a879-30fe1c0aefe1"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Sale Rolling 12 Months Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Sale Rolling 12 Months Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average GCI Per Sale Rolling 12 Months Live
        private void AverageGCIPerSaleRolling12MonthsLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Sale Rolling 12 Months Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_056ed04c389c4f8b9fd58b8e3e92c800);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("d8e33a13-aa81-4ab7-a232-19bf0a64ed8f"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Average GCI Per Sale Rolling 12 Months Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Average GCI Per Sale Rolling 12 Months Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Sale Rolling 12 Months Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average GCI Per Listing Rolling 12 Months Live
        private void AverageGCIPerListingRolling12MonthsLive_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("5854b603-1473-451b-99eb-83e08152d7bd"), "Execute Expected Query", TestStepType.Test, AverageGCIPerListingRolling12MonthsLive_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average GCI Per Listing Rolling 12 Months Live
        private void AverageGCIPerListingRolling12MonthsLive_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Listing Rolling 12 Months Live", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("e34ac997-5d12-42ce-9363-bb6a21edc0f9"), "Value", Resources.TestResource_ExpectedQuery_e34ac9975d1242ce9363bb6a21edc0f9);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("5854b603-1473-451b-99eb-83e08152d7bd"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("5854b603-1473-451b-99eb-83e08152d7bd"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("5854b603-1473-451b-99eb-83e08152d7bd"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Listing Rolling 12 Months Live", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Listing Rolling 12 Months Live", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average GCI Per Listing Rolling 12 Months Live
        private void AverageGCIPerListingRolling12MonthsLive_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("6959c07c-450d-48ca-bdf9-4b401cc62932"), "Execute Actual Query", TestStepType.Test, AverageGCIPerListingRolling12MonthsLive_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average GCI Per Listing Rolling 12 Months Live
        private void AverageGCIPerListingRolling12MonthsLive_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Listing Rolling 12 Months Live", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("d921d930-7a14-4810-ba9f-40a678fa598f"), "Value", Resources.TestResource_ActualQuery_d921d9307a144810ba9f40a678fa598f);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("6959c07c-450d-48ca-bdf9-4b401cc62932"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("6959c07c-450d-48ca-bdf9-4b401cc62932"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("6959c07c-450d-48ca-bdf9-4b401cc62932"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Dan Elzer Average Commission", "Average GCI Per Listing Rolling 12 Months Live", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Listing Rolling 12 Months Live", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average GCI Per Listing Rolling 12 Months Live
        private void AverageGCIPerListingRolling12MonthsLive_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average GCI Per Listing Rolling 12 Months Live", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_be7d93a28cce477881f2e3f4bc7a20fc);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("094bf6f8-968b-4bb8-8b48-334ae49bce17"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Dan Elzer Average Commission", "Average GCI Per Listing Rolling 12 Months Live", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Dan Elzer Average Commission", "Average GCI Per Listing Rolling 12 Months Live", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average GCI Per Listing Rolling 12 Months Live", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
    }
}

