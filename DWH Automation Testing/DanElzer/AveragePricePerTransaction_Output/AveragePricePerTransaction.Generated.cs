// <auto-generated />
namespace DWH_Automation_Testing.DanElzer.AveragePricePerTransaction_Output
{
    using global::PragmaticWorks.LegiTest.Contracts.Runtime;
    using global::System;
    using global::PragmaticWorks.LegiTest.Runtime;
    using global::NUnit.Framework;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::PragmaticWorks.LegiTest.Runtime.Models;
    using global::PragmaticWorks.LegiTest.DataComparison.Helper;
    using global::PragmaticWorks.Common.Sql.RowStoreGrid;
    using global::PragmaticWorks.LegiTest.Runtime.Exceptions;
    using global::PragmaticWorks.LegiTest.DataComparison.Comparison;
    using global::System.Globalization;
    using global::System.CodeDom.Compiler;
    
    
    // This class was auto-generated by LegiTest
    // Modifications to this class will be over-written if the test suite is regenerated.
    [TestFixture]
    [GeneratedCode("PragmaticWorks.LegiTest", "2020.1.3.0")]
    [UniqueId("c4b3499a-b08a-4ee8-9f96-879cfcdba79e")]
    public partial class AveragePricePerTransaction
    {
        
        // Test resources used for passing resources between steps
        private IResourceProvider _testResources;
        
        // Test state tracker used to co-ordinate pushing results to SentryOne Test
        static ITestStateTracker testStateTracker;
        
        // Parameter provider used to find parameters for individual elements
        static IParameterProvider parameterProvider;
        
        static partial void BeforeTest(string testName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTest(string testName, Dictionary<string, object> testResources);
        static partial void BeforeTestElement(string testName, string elementName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTestElement(string testName, string elementName, Dictionary<string, object> testResources);
        
        static AveragePricePerTransaction()
        {
            // Create the parameter provider used to find parameters for individual elements.
            parameterProvider = new ParameterProvider(new Guid("5f8cbcf1-fbf3-4dbb-a5ba-9a5c63b60082"), typeof(AveragePricePerTransaction));
        }
        
        [TestFixtureSetUp]
        public static void GroupSetup()
        {
            // Print debug information to the console to aid with parameter debugging.
            ParameterProvider.PrintDebugInformation(parameterProvider);
            // Create the test state tracker to track the group's run state against SentryOne Test.
            testStateTracker = new TestStateTracker(typeof(AveragePricePerTransaction), Resources.TestManifest_AveragePricePerTransaction_c4b3499ab08a4ee89f96879cfcdba79e, TestAssemblyInformation.AssemblyTestCount, TestAssemblyInformation.SuiteTestCounts, parameterProvider);
            // Inform the server that the test group has started.
            testStateTracker.RegisterGroupStarted();
        }
        
        [SetUp]
        public void Setup()
        {
            // Create the test resources
            _testResources = new ResourceProvider();
            // Make the test resources available to the parameter provider
            parameterProvider.SetResourcesSource(_testResources);
            // Inform the server that the test has started.
            testStateTracker.RegisterTestStarted(TestContext.CurrentContext.Test.Name);
        }
        
        [TearDown]
        public void Teardown()
        {
            // Inform the server that the test has ended.
            testStateTracker.RegisterTestEnded(TestContext.CurrentContext.Test.Name, (TestContext.CurrentContext.Result.Status == TestStatus.Passed), (TestContext.CurrentContext.Result.Status == TestStatus.Failed), (TestContext.CurrentContext.Result.Status == TestStatus.Inconclusive), (TestContext.CurrentContext.Result.Status == TestStatus.Skipped));
        }
        
        [TestFixtureTearDown]
        public static void GroupTeardown()
        {
            // Inform the server that the test group has ended.
            testStateTracker.RegisterGroupEnded();
        }
        
        // Implementation for test Average Cleared Sale Price of Sales
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("8ade303e-ebde-448c-b7b2-c3510f93afe0")]
        public void AverageClearedSalePriceofSales()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average Cleared Sale Price of Sales", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageClearedSalePriceofSales_ExecutionTrack0, AverageClearedSalePriceofSales_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids", AverageClearedSalePriceofSales_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average Cleared Sale Price of Sales", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average Cleared Sale Price of Listing
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("1ab13fd5-2265-4b15-af72-547475824fd0")]
        public void AverageClearedSalePriceofListing()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average Cleared Sale Price of Listing", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageClearedSalePriceofListing_ExecutionTrack0, AverageClearedSalePriceofListing_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids", AverageClearedSalePriceofListing_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average Cleared Sale Price of Listing", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average Cleared Sale Price for Sales FYTD
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("2ed72770-2c8c-4604-80a8-cbe241c6fbf6")]
        public void AverageClearedSalePriceforSalesFYTD()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average Cleared Sale Price for Sales FYTD", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageClearedSalePriceforSalesFYTD_ExecutionTrack0, AverageClearedSalePriceforSalesFYTD_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids", AverageClearedSalePriceforSalesFYTD_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average Cleared Sale Price for Sales FYTD", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average Cleared Sale Price for Listings FYTD
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("a68c2f46-6da1-426c-8806-aa53531944d0")]
        public void AverageClearedSalePriceforListingsFYTD()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average Cleared Sale Price for Listings FYTD", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageClearedSalePriceforListingsFYTD_ExecutionTrack0, AverageClearedSalePriceforListingsFYTD_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids", AverageClearedSalePriceforListingsFYTD_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average Cleared Sale Price for Listings FYTD", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average Cleared Sale Price of Sales and  Listings FYTD
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("423e49b4-84f5-439d-abb7-d4db553a60e2")]
        public void AverageClearedSalePriceofSalesandListingsFYTD()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average Cleared Sale Price of Sales and  Listings FYTD", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageClearedSalePriceofSalesandListingsFYTD_ExecutionTrack0, AverageClearedSalePriceofSalesandListingsFYTD_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids", AverageClearedSalePriceofSalesandListingsFYTD_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average Cleared Sale Price of Sales and  Listings FYTD", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Average Cleared Sale Price of Sales and  Listings Rolling 12Month
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("91a8069c-6fcd-4904-a2ff-e135079619f7")]
        public void AverageClearedSalePriceofSalesandListingsRolling12Month()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, AverageClearedSalePriceofSalesandListingsRolling12Month_Executio, AverageClearedSalePriceofSalesandListingsRolling12Month_Executio_2);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids", AverageClearedSalePriceofSalesandListingsRolling12Month_CompareG);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Count of Listings for SellingBranch
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("61eaf2c3-11c5-4a3f-bb28-08ece5affe86")]
        public void CountofListingsforSellingBranch()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Count of Listings for SellingBranch", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, CountofListingsforSellingBranch_ExecutionTrack0, CountofListingsforSellingBranch_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids", CountofListingsforSellingBranch_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Count of Listings for SellingBranch", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Count of Listings for ListingsBranch
        [Category("Average Price Per Transaction")]
        [Test]
        [UniqueId("682de7f2-118b-4060-99ca-ab14b06ecd7d")]
        public void CountofListingsforListingsBranch()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Count of Listings for ListingsBranch", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, CountofListingsforListingsBranch_ExecutionTrack0, CountofListingsforListingsBranch_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids", CountofListingsforListingsBranch_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Count of Listings for ListingsBranch", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average Cleared Sale Price of Sales
        private void AverageClearedSalePriceofSales_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("1f3fdda8-4fbc-4d2a-8d7e-59379b88a28c"), "Execute Expected Query", TestStepType.Test, AverageClearedSalePriceofSales_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average Cleared Sale Price of Sales
        private void AverageClearedSalePriceofSales_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("dcb51eca-5b66-4b39-9828-81f5f1e08927"), "Value", Resources.TestResource_ExpectedQuery_dcb51eca5b664b39982881f5f1e08927);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("1f3fdda8-4fbc-4d2a-8d7e-59379b88a28c"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("1f3fdda8-4fbc-4d2a-8d7e-59379b88a28c"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("1f3fdda8-4fbc-4d2a-8d7e-59379b88a28c"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Sales", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average Cleared Sale Price of Sales
        private void AverageClearedSalePriceofSales_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("6f7ff4b2-b37c-4f98-8480-eb785c625c83"), "Execute Actual Query", TestStepType.Test, AverageClearedSalePriceofSales_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average Cleared Sale Price of Sales
        private void AverageClearedSalePriceofSales_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("331e0ec8-b196-448e-9203-6adeb42a9918"), "Value", Resources.TestResource_ActualQuery_331e0ec8b196448e92036adeb42a9918);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("6f7ff4b2-b37c-4f98-8480-eb785c625c83"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("6f7ff4b2-b37c-4f98-8480-eb785c625c83"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("6f7ff4b2-b37c-4f98-8480-eb785c625c83"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Sales", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average Cleared Sale Price of Sales
        private void AverageClearedSalePriceofSales_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_1dc20fd066444a1f8711b55213c3ab6b);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("af780344-25f0-4d86-9584-06a6d5457c3e"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Average Cleared Sale Price of Sales", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Average Cleared Sale Price of Sales", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average Cleared Sale Price of Listing
        private void AverageClearedSalePriceofListing_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("ca86fc15-f508-43d3-8ecb-0989c6d6aa89"), "Execute Expected Query", TestStepType.Test, AverageClearedSalePriceofListing_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average Cleared Sale Price of Listing
        private void AverageClearedSalePriceofListing_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Listing", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("d962058c-a545-4d04-abeb-79507d3d771f"), "Value", Resources.TestResource_ExpectedQuery_d962058ca5454d04abeb79507d3d771f);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("ca86fc15-f508-43d3-8ecb-0989c6d6aa89"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("ca86fc15-f508-43d3-8ecb-0989c6d6aa89"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("ca86fc15-f508-43d3-8ecb-0989c6d6aa89"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Listing", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Listing", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average Cleared Sale Price of Listing
        private void AverageClearedSalePriceofListing_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("fd310e1f-fa6f-446f-84e2-4dfebdfe0d9d"), "Execute Actual Query", TestStepType.Test, AverageClearedSalePriceofListing_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average Cleared Sale Price of Listing
        private void AverageClearedSalePriceofListing_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Listing", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("1bada2b5-01c7-4981-a85d-71ad1e7e511e"), "Value", Resources.TestResource_ActualQuery_1bada2b501c74981a85d71ad1e7e511e);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("fd310e1f-fa6f-446f-84e2-4dfebdfe0d9d"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("fd310e1f-fa6f-446f-84e2-4dfebdfe0d9d"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("fd310e1f-fa6f-446f-84e2-4dfebdfe0d9d"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Listing", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Listing", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average Cleared Sale Price of Listing
        private void AverageClearedSalePriceofListing_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Listing", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_fe8fceb5e098450f8089e3b909ceb12a);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("5a701748-315c-4731-bb35-d26cf5675dd3"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Average Cleared Sale Price of Listing", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Average Cleared Sale Price of Listing", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Listing", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average Cleared Sale Price for Sales FYTD
        private void AverageClearedSalePriceforSalesFYTD_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("1ad5ba3f-d706-449d-9ec1-c849ad8bd167"), "Execute Expected Query", TestStepType.Test, AverageClearedSalePriceforSalesFYTD_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average Cleared Sale Price for Sales FYTD
        private void AverageClearedSalePriceforSalesFYTD_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price for Sales FYTD", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("42602edc-dfa4-451f-b89f-cf1e90d9658d"), "Value", Resources.TestResource_ExpectedQuery_42602edcdfa4451fb89fcf1e90d9658d);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("1ad5ba3f-d706-449d-9ec1-c849ad8bd167"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("1ad5ba3f-d706-449d-9ec1-c849ad8bd167"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("1ad5ba3f-d706-449d-9ec1-c849ad8bd167"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price for Sales FYTD", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price for Sales FYTD", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average Cleared Sale Price for Sales FYTD
        private void AverageClearedSalePriceforSalesFYTD_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("c65938a6-5299-4260-b733-309fd8cbdce2"), "Execute Actual Query", TestStepType.Test, AverageClearedSalePriceforSalesFYTD_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average Cleared Sale Price for Sales FYTD
        private void AverageClearedSalePriceforSalesFYTD_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price for Sales FYTD", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("b6b60291-bbdd-48bf-a065-00a6900fcafb"), "Value", Resources.TestResource_ActualQuery_b6b60291bbdd48bfa06500a6900fcafb);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("c65938a6-5299-4260-b733-309fd8cbdce2"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("c65938a6-5299-4260-b733-309fd8cbdce2"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("c65938a6-5299-4260-b733-309fd8cbdce2"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price for Sales FYTD", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price for Sales FYTD", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average Cleared Sale Price for Sales FYTD
        private void AverageClearedSalePriceforSalesFYTD_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price for Sales FYTD", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_d380419f4da6454584412b1a59a2b7af);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Average Cleared Sale Price for Sales FYTD", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Average Cleared Sale Price for Sales FYTD", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price for Sales FYTD", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average Cleared Sale Price for Listings FYTD
        private void AverageClearedSalePriceforListingsFYTD_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("fc503fe8-331a-4732-baf0-0befc1dfca0e"), "Execute Expected Query", TestStepType.Test, AverageClearedSalePriceforListingsFYTD_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Average Cleared Sale Price for Listings FYTD
        private void AverageClearedSalePriceforListingsFYTD_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price for Listings FYTD", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("17a787d2-1221-438e-889e-fd84b933c2a5"), "Value", Resources.TestResource_ExpectedQuery_17a787d21221438e889efd84b933c2a5);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("fc503fe8-331a-4732-baf0-0befc1dfca0e"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("fc503fe8-331a-4732-baf0-0befc1dfca0e"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("fc503fe8-331a-4732-baf0-0befc1dfca0e"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price for Listings FYTD", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price for Listings FYTD", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average Cleared Sale Price for Listings FYTD
        private void AverageClearedSalePriceforListingsFYTD_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("76d9cdac-64a2-4450-a8e8-8a36926e6ffb"), "Execute Actual Query", TestStepType.Test, AverageClearedSalePriceforListingsFYTD_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average Cleared Sale Price for Listings FYTD
        private void AverageClearedSalePriceforListingsFYTD_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price for Listings FYTD", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("a0cb671b-2eea-488c-9947-978db3d4c573"), "Value", Resources.TestResource_ActualQuery_a0cb671b2eea488c9947978db3d4c573);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("76d9cdac-64a2-4450-a8e8-8a36926e6ffb"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("76d9cdac-64a2-4450-a8e8-8a36926e6ffb"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("76d9cdac-64a2-4450-a8e8-8a36926e6ffb"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price for Listings FYTD", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price for Listings FYTD", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average Cleared Sale Price for Listings FYTD
        private void AverageClearedSalePriceforListingsFYTD_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price for Listings FYTD", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_b9e65668f0e64c71b3ea72ea608f4784);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("e6483953-2eda-406f-a124-6bcadc747ea6"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Average Cleared Sale Price for Listings FYTD", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Average Cleared Sale Price for Listings FYTD", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price for Listings FYTD", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average Cleared Sale Price of Sales and  Listings FYTD
        private void AverageClearedSalePriceofSalesandListingsFYTD_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("e0846a59-4027-4558-a8f3-d4da382367ea"), "Execute Expected Query", TestStepType.Test, AverageClearedSalePriceofSalesandListingsFYTD_ExecuteExpectedQue);
        }
        
        // Implementation for step Execute Expected Query for Average Cleared Sale Price of Sales and  Listings FYTD
        private void AverageClearedSalePriceofSalesandListingsFYTD_ExecuteExpectedQue()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales and  Listings FYTD", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("2ade3d37-3224-44ed-a292-4a6290c32b85"), "Value", Resources.TestResource_ExpectedQuery_2ade3d37322444eda2924a6290c32b85);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("e0846a59-4027-4558-a8f3-d4da382367ea"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("e0846a59-4027-4558-a8f3-d4da382367ea"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("e0846a59-4027-4558-a8f3-d4da382367ea"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings FYTD", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales and  Listings FYTD", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average Cleared Sale Price of Sales and  Listings FYTD
        private void AverageClearedSalePriceofSalesandListingsFYTD_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("8769c2bb-5a3b-416f-a6bb-339291fa5c19"), "Execute Actual Query", TestStepType.Test, AverageClearedSalePriceofSalesandListingsFYTD_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Average Cleared Sale Price of Sales and  Listings FYTD
        private void AverageClearedSalePriceofSalesandListingsFYTD_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales and  Listings FYTD", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("666caf35-e057-4aae-851f-7404b5fc732d"), "Value", Resources.TestResource_ActualQuery_666caf35e0574aae851f7404b5fc732d);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("8769c2bb-5a3b-416f-a6bb-339291fa5c19"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("8769c2bb-5a3b-416f-a6bb-339291fa5c19"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("8769c2bb-5a3b-416f-a6bb-339291fa5c19"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings FYTD", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales and  Listings FYTD", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average Cleared Sale Price of Sales and  Listings FYTD
        private void AverageClearedSalePriceofSalesandListingsFYTD_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales and  Listings FYTD", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_b1cd0ce1fb9540d38d3da9c5a4c4c314);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("657487eb-ee61-4157-a473-a3db9f9a7591"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings FYTD", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings FYTD", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales and  Listings FYTD", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Average Cleared Sale Price of Sales and  Listings Rolling 12Month
        private void AverageClearedSalePriceofSalesandListingsRolling12Month_Executio()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("80d9d8ae-ba34-43a4-bce0-40a995023b8f"), "Execute Expected Query", TestStepType.Test, AverageClearedSalePriceofSalesandListingsRolling12Month_ExecuteE);
        }
        
        // Implementation for step Execute Expected Query for Average Cleared Sale Price of Sales and  Listings Rolling 12Month
        private void AverageClearedSalePriceofSalesandListingsRolling12Month_ExecuteE()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("bfab3ea4-9a8d-4fa7-bd74-384886434b81"), "Value", Resources.TestResource_ExpectedQuery_bfab3ea49a8d4fa7bd74384886434b81);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("80d9d8ae-ba34-43a4-bce0-40a995023b8f"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("80d9d8ae-ba34-43a4-bce0-40a995023b8f"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("80d9d8ae-ba34-43a4-bce0-40a995023b8f"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Average Cleared Sale Price of Sales and  Listings Rolling 12Month
        private void AverageClearedSalePriceofSalesandListingsRolling12Month_Executio_2()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("944a6b0f-5f41-4d4e-9c94-02b1d71cb2a5"), "Execute Actual Query", TestStepType.Test, AverageClearedSalePriceofSalesandListingsRolling12Month_ExecuteA);
        }
        
        // Implementation for step Execute Actual Query for Average Cleared Sale Price of Sales and  Listings Rolling 12Month
        private void AverageClearedSalePriceofSalesandListingsRolling12Month_ExecuteA()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("86078058-10ce-417f-acf2-1fe91474849b"), "Value", Resources.TestResource_ActualQuery_8607805810ce417facf21fe91474849b);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("944a6b0f-5f41-4d4e-9c94-02b1d71cb2a5"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("944a6b0f-5f41-4d4e-9c94-02b1d71cb2a5"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("944a6b0f-5f41-4d4e-9c94-02b1d71cb2a5"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Average Cleared Sale Price of Sales and  Listings Rolling 12Month
        private void AverageClearedSalePriceofSalesandListingsRolling12Month_CompareG()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_dda7335f0347400a83e1da204a6fbfea);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("6869a525-f894-45be-8a32-dcb541164938"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Average Cleared Sale Price of Sales and  Listings Rolling 12Month", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Count of Listings for SellingBranch
        private void CountofListingsforSellingBranch_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("07090da0-26ca-404f-9863-aa401563f402"), "Execute Expected Query", TestStepType.Test, CountofListingsforSellingBranch_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Count of Listings for SellingBranch
        private void CountofListingsforSellingBranch_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listings for SellingBranch", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("931fda72-4620-49b0-8e1c-a974dcc30e26"), "Value", Resources.TestResource_ExpectedQuery_931fda72462049b08e1ca974dcc30e26);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("07090da0-26ca-404f-9863-aa401563f402"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("07090da0-26ca-404f-9863-aa401563f402"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("07090da0-26ca-404f-9863-aa401563f402"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Count of Listings for SellingBranch", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listings for SellingBranch", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Count of Listings for SellingBranch
        private void CountofListingsforSellingBranch_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("d741b8e2-e3e4-4dcb-ab5a-c5010ac2774b"), "Execute Actual Query", TestStepType.Test, CountofListingsforSellingBranch_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Count of Listings for SellingBranch
        private void CountofListingsforSellingBranch_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listings for SellingBranch", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("abc74bb1-88fe-4ced-bae5-523a0d2ff634"), "Value", Resources.TestResource_ActualQuery_abc74bb188fe4cedbae5523a0d2ff634);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("d741b8e2-e3e4-4dcb-ab5a-c5010ac2774b"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("d741b8e2-e3e4-4dcb-ab5a-c5010ac2774b"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("d741b8e2-e3e4-4dcb-ab5a-c5010ac2774b"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Count of Listings for SellingBranch", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listings for SellingBranch", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Count of Listings for SellingBranch
        private void CountofListingsforSellingBranch_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listings for SellingBranch", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_85c9819e84a54108b2b97421b99a794e);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("04bae5ed-c296-4c2c-af38-d72868d9ed22"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Count of Listings for SellingBranch", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Count of Listings for SellingBranch", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listings for SellingBranch", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Count of Listings for ListingsBranch
        private void CountofListingsforListingsBranch_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("c71fed8c-2561-40b5-98fb-0a2ce6914b19"), "Execute Expected Query", TestStepType.Test, CountofListingsforListingsBranch_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Count of Listings for ListingsBranch
        private void CountofListingsforListingsBranch_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listings for ListingsBranch", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH Prod
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHProd_c2a749ae94fd4b38a26c8ca0efb4360b);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("c2a749ae-94fd-4b38-a26c-8ca0efb4360b"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("a0ba92be-8bc2-4f52-92e0-aac023152f83"), "Value", Resources.TestResource_ExpectedQuery_a0ba92be8bc24f5292e0aac023152f83);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("c71fed8c-2561-40b5-98fb-0a2ce6914b19"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("c71fed8c-2561-40b5-98fb-0a2ce6914b19"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("c71fed8c-2561-40b5-98fb-0a2ce6914b19"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Count of Listings for ListingsBranch", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listings for ListingsBranch", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Count of Listings for ListingsBranch
        private void CountofListingsforListingsBranch_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("b4ad1fcd-b613-4a0b-9217-c015d5bb98e0"), "Execute Actual Query", TestStepType.Test, CountofListingsforListingsBranch_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Count of Listings for ListingsBranch
        private void CountofListingsforListingsBranch_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listings for ListingsBranch", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("8f6a9e0d-01b0-452c-a665-fd104b9b995c"), "Value", Resources.TestResource_ActualQuery_8f6a9e0d01b0452ca665fd104b9b995c);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("b4ad1fcd-b613-4a0b-9217-c015d5bb98e0"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("b4ad1fcd-b613-4a0b-9217-c015d5bb98e0"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("b4ad1fcd-b613-4a0b-9217-c015d5bb98e0"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Average Price Per Transaction", "Count of Listings for ListingsBranch", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listings for ListingsBranch", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Count of Listings for ListingsBranch
        private void CountofListingsforListingsBranch_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Count of Listings for ListingsBranch", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_3994383f30694f0994d3935c9313e6a3);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("1889790e-ea8d-4cf9-ac55-6531ac09aff4"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Average Price Per Transaction", "Count of Listings for ListingsBranch", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Average Price Per Transaction", "Count of Listings for ListingsBranch", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Count of Listings for ListingsBranch", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
    }
}

