<?xml version="1.0" encoding="utf-8"?>
<TestSuite targetFramework="NUnit" failOnServerPublishFailure="False" revision="23" pushRevisionToAssembly="False" lastAssetContentPath="AveragePricePerTransaction_Assets" name="Average Price Per Transaction" uniqueId="5f8cbcf1-fbf3-4dbb-a5ba-9a5c63b60082" isEnabled="True">
  <Assets>
    <TestAssetCollection>
      <TestAssets />
    </TestAssetCollection>
  </Assets>
  <TestGroups>
    <TestGroup conditionFlag="" name="Average Price Per Transaction" uniqueId="c4b3499a-b08a-4ee8-9f96-879cfcdba79e" isEnabled="True">
      <CoverageTargets />
      <Annotations />
      <Assets>
        <TestAssetCollection>
          <TestAssets>
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="DWH stage" uniqueId="9c0a93a6-e320-45e7-8e7d-50bba97c5f8f" isEnabled="True" provider="System.Data.SqlClient" connectionString="hYkgHZSlyCZ8kGkHHn8WDengAhWkqn5KWHoaRh0nbTjoELDg8WFebn3lk4L4/QXwID/lMay7klW2RlhW15OVU7X1ICGsuJs8W74uevf41k0YNoBZm79S2cg1aqc7ZbYUHIVVIGa3uEXX+LSazX2RHA==" />
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="SSAS Matrix Production" uniqueId="b89de6ca-e660-4205-b75e-0566246db3fc" isEnabled="True" provider="System.Data.OleDb" connectionString="1NU6x5CRgZH7WSzO2Xnzl72gt+011lbIi3W0TUQ5j6Gk6C09AxEe04Stq4ibTEYseCdJPloBqY1VatLSgifau2GOst88s22lL4DeABNM6HSxl/j0Hymf0ZmdnpzxTKMciLf60u+cY4fWnpCVfZfT0JLYVOSR/zgzKqFAlQnL070P8ftso8cOipSgNlKeUEBqsd6wY9TI9WKsXPRZv5MTjF11NLwWZAULDOLM4O20DWJLrPn3TPhZ/I5lzhGvRo6M" />
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="DWH Prod" uniqueId="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" isEnabled="True" provider="System.Data.SqlClient" connectionString="Qd4iffJj9QB+I2wsFl6atb7JdC5r8m7o9PEj8GfycW2gICgF74LNsskz0/xg4c33k5+KmQhnDNPb5GRt3o9wcjIo7enbkYAPQl0h87zND3Wrn6TKO992GO6sLZRV1kh3" />
            <TestAsset uniqueTypeId="829b5100-8a1a-46ec-b733-9ea62fa7dc39" groupId="bf941917-6860-404a-9dc3-e454592eddbf" name="SSAS Matrix Stage" uniqueId="8e44e5c0-5a37-4644-88a9-d311993a301b" isEnabled="True" provider="System.Data.OleDb" connectionString="1NU6x5CRgZH7WSzO2Xnzl72gt+011lbIi3W0TUQ5j6Gk6C09AxEe04Stq4ibTEYsZCKjLLB+b8iJqJRf0eX9p30L++8MDb1InuuXHu2rYgx04lMp6CSQC8BL/ekR+aRX2uEOe2j96AIKFyIZJ50uF3Aly1TeuWYZfx2d1Bh/EgChBVfvTvSsjhY5J7GO7U67KanK3Wz3RLw7hB9j8fiKTbGW+k0hoh+PfZbtCUel+aouvpjH1bpETBpMLMJAPcgu" />
          </TestAssets>
        </TestAssetCollection>
      </Assets>
      <GroupInitializationSteps />
      <TestInitializationSteps />
      <Tests>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average Cleared Sale Price of Sales" uniqueId="8ade303e-ebde-448c-b7b2-c3510f93afe0" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="dcb51eca-5b66-4b39-9828-81f5f1e08927" isEnabled="True">
                  <Value>with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
and c.[Commission Type Code]='S'
group by s.[Sales Number]
)
select AVG (ave)  Average_Cleared_Sale_price_of_Sales
FROM cte
 </Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="331e0ec8-b196-448e-9203-6adeb42a9918" isEnabled="True">
                  <Value>// DAX Query
EVALUATE
  ROW(
    "Average_Cleared_Sale_price_of_Sales", 'Measure'[Average Cleared Sale price of Sales]
  )


// DAX Query
EVALUATE
  ROW(
    "Average_Cleared_Sale_price_of_Sales", 'Measure'[Average Cleared Sale price of Sales]
  )


// DAX Query
EVALUATE
  ROW(
    "Average_Cleared_Sale_price_of_Sales", 'Measure'[Average Cleared Sale price of Sales]
  )
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="1dc20fd0-6644-4a1f-8711-b55213c3ab6b" isEnabled="True" leftGridProvider="1f3fdda8-4fbc-4d2a-8d7e-59379b88a28c" rightGridProvider="6f7ff4b2-b37c-4f98-8480-eb785c625c83">
                  <LeftColumns>
                    <Column index="0" columnName="Average_Cleared_Sale_price_of_Sales" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="[Average_Cleared_Sale_price_of_Sales]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="ec326669-6ca6-4104-aa47-251da892586e" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="1f3fdda8-4fbc-4d2a-8d7e-59379b88a28c" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="dcb51eca-5b66-4b39-9828-81f5f1e08927" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="d187535f-7851-4c6d-9e8d-397855baaa11" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="6f7ff4b2-b37c-4f98-8480-eb785c625c83" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="331e0ec8-b196-448e-9203-6adeb42a9918" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="af780344-25f0-4d86-9584-06a6d5457c3e" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="1dc20fd0-6644-4a1f-8711-b55213c3ab6b" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average Cleared Sale Price of Listing" uniqueId="1ab13fd5-2265-4b15-af72-547475824fd0" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="d962058c-a545-4d04-abeb-79507d3d771f" isEnabled="True">
                  <Value>with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
and c.[Commission Type Code]='L'
group by s.[Sales Number]
)
select AVG (ave)  Average_Cleared_Sale_price_of_Listing
FROM cte
 </Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="1bada2b5-01c7-4981-a85d-71ad1e7e511e" isEnabled="True">
                  <Value>// DAX Query
EVALUATE
  ROW(
    "Average_Cleared_Sale_Price_of_Listings", 'Measure'[Average Cleared Sale Price of Listings]
  )
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="fe8fceb5-e098-450f-8089-e3b909ceb12a" isEnabled="True" leftGridProvider="ca86fc15-f508-43d3-8ecb-0989c6d6aa89" rightGridProvider="fd310e1f-fa6f-446f-84e2-4dfebdfe0d9d">
                  <LeftColumns>
                    <Column index="0" columnName="Average_Cleared_Sale_price_of_Listing" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="[Average_Cleared_Sale_Price_of_Listings]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="af9dc1cb-71ca-4c35-8779-28d3e410573a" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="ca86fc15-f508-43d3-8ecb-0989c6d6aa89" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="d962058c-a545-4d04-abeb-79507d3d771f" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="01634d3a-0efd-40a8-9185-b05d46cacc6d" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="fd310e1f-fa6f-446f-84e2-4dfebdfe0d9d" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="1bada2b5-01c7-4981-a85d-71ad1e7e511e" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="5a701748-315c-4731-bb35-d26cf5675dd3" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="fe8fceb5-e098-450f-8089-e3b909ceb12a" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average Cleared Sale Price for Sales FYTD" uniqueId="2ed72770-2c8c-4604-80a8-cbe241c6fbf6" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="42602edc-dfa4-451f-b89f-cf1e90d9658d" isEnabled="True">
                  <Value>with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
and c.[Commission Type Code]='S'
and c.DIM_DATE_KEY between '20190401' and '20200331'
group by s.[Sales Number]
)
select AVG (ave) Average_Cleared_Sale_Price_for_Sales_FYTD
from cte</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="b6b60291-bbdd-48bf-a065-00a6900fcafb" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({"2019-2020"}, 'Date'[Financial Year (Calendar)])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Financial Year (Calendar)],
      __DS0FilterTable,
      "Average_Cleared_Sale_price_of_Sales_FYTD", 'Measure'[Average Cleared Sale price of Sales FYTD]
    ),
    'Date'[Financial Year (Calendar)],
    1
  )

ORDER BY
  'Date'[Financial Year (Calendar)]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="d380419f-4da6-4545-8441-2b1a59a2b7af" isEnabled="True" leftGridProvider="1ad5ba3f-d706-449d-9ec1-c849ad8bd167" rightGridProvider="c65938a6-5299-4260-b733-309fd8cbdce2">
                  <LeftColumns>
                    <Column index="0" columnName="Average_Cleared_Sale_Price_for_Sales_FYTD" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Financial Year (Calendar)]" typeName="System.String" />
                    <Column index="1" columnName="[Average_Cleared_Sale_price_of_Sales_FYTD]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="7a333ced-e58a-4a4b-98d7-49a773351fa2" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="1ad5ba3f-d706-449d-9ec1-c849ad8bd167" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="42602edc-dfa4-451f-b89f-cf1e90d9658d" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="4c0f4c78-401a-4b54-b639-620e7cdb08fa" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="c65938a6-5299-4260-b733-309fd8cbdce2" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="b6b60291-bbdd-48bf-a065-00a6900fcafb" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="e9325c0b-e5e8-454f-9e60-6b2a1a5b4f5a" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="d380419f-4da6-4545-8441-2b1a59a2b7af" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average Cleared Sale Price for Listings FYTD" uniqueId="a68c2f46-6da1-426c-8806-aa53531944d0" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="17a787d2-1221-438e-889e-fd84b933c2a5" isEnabled="True">
                  <Value>with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
and c.[Commission Type Code]='L'
and c.DIM_DATE_KEY between '20200401' and '20210331'
group by s.[Sales Number]
)
select AVG (ave) Average_Cleared_Sale_Price_for_Listings_FYTD
from cte</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="a0cb671b-2eea-488c-9947-978db3d4c573" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({"2020-2021"}, 'Date'[Financial Year (Calendar)])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Financial Year (Calendar)],
      __DS0FilterTable,
      "Average_Cleared_Sale_Price_of_Listings_FYTD", 'Measure'[Average Cleared Sale Price of Listings FYTD]
    ),
    'Date'[Financial Year (Calendar)],
    1
  )

ORDER BY
  'Date'[Financial Year (Calendar)]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="b9e65668-f0e6-4c71-b3ea-72ea608f4784" isEnabled="True" leftGridProvider="fc503fe8-331a-4732-baf0-0befc1dfca0e" rightGridProvider="76d9cdac-64a2-4450-a8e8-8a36926e6ffb">
                  <LeftColumns>
                    <Column index="0" columnName="Average_Cleared_Sale_Price_for_Listings_FYTD" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Financial Year (Calendar)]" typeName="System.String" />
                    <Column index="1" columnName="[Average_Cleared_Sale_Price_of_Listings_FYTD]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="92fecd24-bec2-4b50-808a-41e6a2c9813a" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="fc503fe8-331a-4732-baf0-0befc1dfca0e" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="17a787d2-1221-438e-889e-fd84b933c2a5" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="e9d67fb1-53ec-411c-aaff-371c06e039d7" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="76d9cdac-64a2-4450-a8e8-8a36926e6ffb" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="a0cb671b-2eea-488c-9947-978db3d4c573" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="e6483953-2eda-406f-a124-6bcadc747ea6" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="b9e65668-f0e6-4c71-b3ea-72ea608f4784" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average Cleared Sale Price of Sales and  Listings FYTD" uniqueId="423e49b4-84f5-439d-abb7-d4db553a60e2" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="2ade3d37-3224-44ed-a292-4a6290c32b85" isEnabled="True">
                  <Value>with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
AND c.[Commission Type Code] IN ('L','S')
and c.DIM_DATE_KEY between '20200401' and '20210331'
group by s.[Sales Number]
)
select AVG (ave) Average_Cleared_Sale_Price_for_Sales_AND_Listings_FYTD
from cte</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="666caf35-e057-4aae-851f-7404b5fc732d" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  TREATAS({"2020-2021"}, 'Date'[Financial Year (Calendar)])

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Financial Year (Calendar)],
      __DS0FilterTable,
      "Average_Cleared_Sale_Price_of_Listings_and_Sales_FYTD", 'Measure'[Average Cleared Sale Price of Listings and Sales FYTD]
    ),
    'Date'[Financial Year (Calendar)],
    1
  )

ORDER BY
  'Date'[Financial Year (Calendar)]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="b1cd0ce1-fb95-40d3-8d3d-a9c5a4c4c314" isEnabled="True" leftGridProvider="e0846a59-4027-4558-a8f3-d4da382367ea" rightGridProvider="8769c2bb-5a3b-416f-a6bb-339291fa5c19">
                  <LeftColumns>
                    <Column index="0" columnName="Average_Cleared_Sale_Price_for_Sales_AND_Listings_FYTD" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Financial Year (Calendar)]" typeName="System.String" />
                    <Column index="1" columnName="[Average_Cleared_Sale_Price_of_Listings_and_Sales_FYTD]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="9ae612ec-30cf-4e10-a7c9-cd1bb3c02150" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="e0846a59-4027-4558-a8f3-d4da382367ea" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="2ade3d37-3224-44ed-a292-4a6290c32b85" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="2e494c1c-300a-45de-8544-b94332235241" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="8769c2bb-5a3b-416f-a6bb-339291fa5c19" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="666caf35-e057-4aae-851f-7404b5fc732d" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="657487eb-ee61-4157-a473-a3db9f9a7591" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="b1cd0ce1-fb95-40d3-8d3d-a9c5a4c4c314" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Average Cleared Sale Price of Sales and  Listings Rolling 12Month" uniqueId="91a8069c-6fcd-4904-a2ff-e135079619f7" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="bfab3ea4-9a8d-4fa7-bd74-384886434b81" isEnabled="True">
                  <Value>with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
AND c.[Commission Type Code] IN ('L','S')
and c.DIM_DATE_KEY between '20200201' and '20210131'
group by s.[Sales Number]
)
select AVG (ave) Average_Cleared_Sale_Price_for_Sales_AND_Listings_FYTD
from cte</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="86078058-10ce-417f-acf2-1fe91474849b" isEnabled="True">
                  <Value>// DAX Query
DEFINE
  VAR __DS0FilterTable = 
    TREATAS({"January"}, 'Date'[Calendar Month Name])

  VAR __DS0FilterTable2 = 
    FILTER(KEEPFILTERS(VALUES('Date'[Calendar Year])), 'Date'[Calendar Year] = 2021)

EVALUATE
  TOPN(
    501,
    SUMMARIZECOLUMNS(
      'Date'[Calendar Month Name],
      'Date'[Financial Month Number],
      'Date'[Calendar Year],
      __DS0FilterTable,
      __DS0FilterTable2,
      "Average_Cleared_Sale_Price_of_Listings_and_Sales_Rolling_12_Months", 'Measure'[Average Cleared Sale Price of Listings and Sales Rolling 12 Months]
    ),
    'Date'[Financial Month Number],
    1,
    'Date'[Calendar Month Name],
    1,
    'Date'[Calendar Year],
    1
  )

ORDER BY
  'Date'[Financial Month Number], 'Date'[Calendar Month Name], 'Date'[Calendar Year]
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="dda7335f-0347-400a-83e1-da204a6fbfea" isEnabled="True" leftGridProvider="80d9d8ae-ba34-43a4-bce0-40a995023b8f" rightGridProvider="944a6b0f-5f41-4d4e-9c94-02b1d71cb2a5">
                  <LeftColumns>
                    <Column index="0" columnName="Average_Cleared_Sale_Price_for_Sales_AND_Listings_FYTD" typeName="System.Decimal" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="Date[Calendar Month Name]" typeName="System.String" />
                    <Column index="1" columnName="Date[Financial Month Number]" typeName="System.Int64" />
                    <Column index="2" columnName="Date[Calendar Year]" typeName="System.Int64" />
                    <Column index="3" columnName="[Average_Cleared_Sale_Price_of_Listings_and_Sales_Rolling_12_Months]" typeName="System.Decimal" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="f8af11cd-a0b8-4309-8491-ea7f94f83d85" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="80d9d8ae-ba34-43a4-bce0-40a995023b8f" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="bfab3ea4-9a8d-4fa7-bd74-384886434b81" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="0ef6873f-5a84-4ff5-8995-47adec3fa113" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="944a6b0f-5f41-4d4e-9c94-02b1d71cb2a5" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="86078058-10ce-417f-acf2-1fe91474849b" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="6869a525-f894-45be-8a32-dcb541164938" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="dda7335f-0347-400a-83e1-da204a6fbfea" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Count of Listings for SellingBranch" uniqueId="61eaf2c3-11c5-4a3f-bb28-08ece5affe86" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="931fda72-4620-49b0-8e1c-a974dcc30e26" isEnabled="True">
                  <Value>
with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave,l.[Listing Number]
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
inner join viewListing l
	on fc.DIM_LISTING_KEY=l.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
and c.[Commission Type Code] in ('s')
--and c.DIM_DATE_KEY between '20190401' and '20200331'
group by s.[Sales Number], l.[Listing Number]
--order by [Listing Number], [Sales Number]

--select * from dw.dimSales where LISTING_NUMBER='39196A'
--select * from dw.dimListing where LISTING_NUMBER='39196A'

)
,cte1 as (
select AVG (ave) Average_Cleared_Sale_Price_for_Sales_FYTD, cte.[Listing Number]
from cte
group by cte.[Listing Number]
--order by  cte.[Listing Number] desc
)
 
select COUNT([Listing Number]) CountofListingsForSellingBranch FROM cte1

</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="abc74bb1-88fe-4ced-bae5-523a0d2ff634" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  FILTER(
    KEEPFILTERS(VALUES('Listing'[Listing Number])),
    NOT(ISBLANK('Listing'[Listing Number]))
  )

EVALUATE
  SUMMARIZECOLUMNS(
    __DS0FilterTable,
    "Count_of_Listings_for_Selling_Branch", IGNORE('Measure'[Count of Listings for Selling Branch])
  )
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="85c9819e-84a5-4108-b2b9-7421b99a794e" isEnabled="True" leftGridProvider="07090da0-26ca-404f-9863-aa401563f402" rightGridProvider="d741b8e2-e3e4-4dcb-ab5a-c5010ac2774b">
                  <LeftColumns>
                    <Column index="0" columnName="CountofListingsForSellingBranch" typeName="System.Int32" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="[Count_of_Listings_for_Selling_Branch]" typeName="System.Int64" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="2d728bce-0464-43ec-9eac-e6f838c26fca" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="07090da0-26ca-404f-9863-aa401563f402" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="931fda72-4620-49b0-8e1c-a974dcc30e26" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="028ad4f0-7543-4d22-b2af-22de7b0c38fd" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="d741b8e2-e3e4-4dcb-ab5a-c5010ac2774b" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="abc74bb1-88fe-4ced-bae5-523a0d2ff634" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="04bae5ed-c296-4c2c-af38-d72868d9ed22" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="85c9819e-84a5-4108-b2b9-7421b99a794e" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
        <Test category="" conditionFlag="" MaxDegreeOfParallelism="0" name="Count of Listings for ListingsBranch" uniqueId="682de7f2-118b-4060-99ca-ab14b06ecd7d" isEnabled="True">
          <CoverageTargets />
          <Annotations />
          <Assets>
            <TestAssetCollection>
              <TestAssets>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Expected Query" uniqueId="a0ba92be-8bc2-4f52-92e0-aac023152f83" isEnabled="True">
                  <Value>
with cte as
(
Select
	s.[Sales Number],
	Avg(fc.[Sale Price]) as ave,l.[Listing Number]
from viewFactSales fc
inner join viewSales s on fc.DIM_SALES_KEY=s.DIM_SALES_KEY
inner join viewFactCommission c on s.DIM_SALES_KEY = c.DIM_SALES_KEY
	and c.DIM_DATE_KEY = fc.DIM_DATE_FINALISED_KEY
	and c.DIM_LISTING_KEY = fc.DIM_LISTING_KEY
inner join viewListing l
	on fc.DIM_LISTING_KEY=l.DIM_LISTING_KEY
where s.[Is Sales Cleared]=1
and c.[Commission Type Code] in ('L')
--and c.DIM_DATE_KEY between '20190401' and '20200331'
group BY s.[Sales Number], l.[Listing Number]
)
,cte1 as (
select AVG (ave) Average_Cleared_Sale_Price_for_Sales_FYTD, cte.[Listing Number]
from cte
group BY cte.[Listing Number]

)
 
select COUNT([Listing Number]) CountofListingsForListingBranch FROM cte1

</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="7b291afd-e1b2-41b6-975e-b2877e92f378" groupId="faefd9ec-3560-45ad-8e45-31876985e663" name="Actual Query" uniqueId="8f6a9e0d-01b0-452c-a665-fd104b9b995c" isEnabled="True">
                  <Value>// DAX Query
DEFINE VAR __DS0FilterTable = 
  FILTER(
    KEEPFILTERS(VALUES('Listing'[Listing Number])),
    NOT(ISBLANK('Listing'[Listing Number]))
  )

EVALUATE
  SUMMARIZECOLUMNS(
    __DS0FilterTable,
    "Count_of_Listings_for_Listing_Branch", IGNORE('Measure'[Count of Listings for Listing Branch])
  )
</Value>
                </TestAsset>
                <TestAsset uniqueTypeId="2571b779-e5f0-48a9-9600-cdf3f4c47803" groupId="2c953ca5-c296-4d67-8e60-2319eece7125" name="Comparison Manifest" uniqueId="3994383f-3069-4f09-94d3-935c9313e6a3" isEnabled="True" leftGridProvider="c71fed8c-2561-40b5-98fb-0a2ce6914b19" rightGridProvider="b4ad1fcd-b613-4a0b-9217-c015d5bb98e0">
                  <LeftColumns>
                    <Column index="0" columnName="CountofListingsForListingBranch" typeName="System.Int32" />
                  </LeftColumns>
                  <RightColumns>
                    <Column index="0" columnName="[Count_of_Listings_for_Listing_Branch]" typeName="System.Int64" />
                  </RightColumns>
                </TestAsset>
              </TestAssets>
            </TestAssetCollection>
          </Assets>
          <InitializationSteps />
          <ExecutionTracks>
            <ExecutionTrack name="Track 1" uniqueId="09105fbc-3131-45a6-bc20-0515906eef94" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Expected Query" uniqueId="c71fed8c-2561-40b5-98fb-0a2ce6914b19" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="a0ba92be-8bc2-4f52-92e0-aac023152f83" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="c2a749ae-94fd-4b38-a26c-8ca0efb4360b" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_LeftQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
            <ExecutionTrack name="Track 2" uniqueId="a0151f9c-cc10-439d-83ee-9d0ea20ec8e1" isEnabled="True">
              <Steps>
                <TestStepAction uniqueTypeId="5cc010df-35ab-47cc-8960-3c1b68233e01" name="Execute Actual Query" uniqueId="b4ad1fcd-b613-4a0b-9217-c015d5bb98e0" isEnabled="True">
                  <ExecuteSqlAction>
                    <!-- The asset containing the query to run against the specified connection -->
                    <QueryAssetUniqueId value="8f6a9e0d-01b0-452c-a665-fd104b9b995c" />
                    <!-- The connection against which to run the query -->
                    <ConnectionAssetUniqueId value="b89de6ca-e660-4205-b75e-0566246db3fc" />
                    <!-- The key to give to the grid placed in the test resources -->
                    <TargetResourceKey value="SqlTest_RightQuery" />
                    <!-- The zero based index of the result set to save -->
                    <ResultSetIndex value="0" />
                    <!-- True if the grid should be a disk based grid, rather than in-memory (for larger grids) -->
                    <DiskBased value="False" />
                    <!-- The timeout to use with the query -->
                    <Timeout value="30" />
                  </ExecuteSqlAction>
                  <ErrorConfiguration includeDerivedTypes="False" />
                </TestStepAction>
              </Steps>
            </ExecutionTrack>
          </ExecutionTracks>
          <Assertions>
            <TestAssertion uniqueTypeId="3f5c501a-2e36-46e8-a6f7-ec623798a515" name="Compare Grids" uniqueId="1889790e-ea8d-4cf9-ac55-6531ac09aff4" isEnabled="True">
              <GridComparison>
                <!-- The grid that contains the expected results used by the grid comparison -->
                <LeftGridResourceKey value="SqlTest_LeftQuery" />
                <!-- The grid that contains the actual results used by the grid comparison -->
                <RightGridResourceKey value="SqlTest_RightQuery" />
                <!-- The comparison manifest specifying how to compare the grids -->
                <ManifestAssetUniqueId value="3994383f-3069-4f09-94d3-935c9313e6a3" />
                <!-- True if the rows only appearing in the expected grid should be ignored -->
                <IgnoreLeftOnlyRows value="False" />
                <!-- True if the rows only appearing in the actual grid should be ignored -->
                <IgnoreRightOnlyRows value="False" />
                <!-- True if the rows that differ should be ignored -->
                <IgnoreDifferentRows value="False" />
                <!-- True if the aggregated comparisons should be ignored -->
                <IgnoreAggregates value="False" />
                <!-- True if equal rows should be included in the difference log sent to the server -->
                <IncludeEqualRows value="False" />
                <!-- The maximum number of differences to send to SentryOne Test -->
                <DifferenceLogRowLimit value="200" />
                <!-- The number of rows which were different that will included in the test runner message on failure. -->
                <TestOutputMessageRowLimit value="10" />
              </GridComparison>
              <ErrorConfiguration includeDerivedTypes="False" />
            </TestAssertion>
          </Assertions>
          <TeardownSteps />
          <DataTarget>
            <DataDrivenDataTarget gridDataProvider="00000000-0000-0000-0000-000000000000" isEnabled="False">
              <Columns />
            </DataDrivenDataTarget>
          </DataTarget>
        </Test>
      </Tests>
      <TestTeardownSteps />
      <GroupTeardownSteps />
    </TestGroup>
  </TestGroups>
  <ParameterSet isServerIntegrationFile="False">
    <Parameters />
    <Mappings />
  </ParameterSet>
  <AnnotationTypes>
    <AnnotationType typeName="LegiTest.UserErrorMessage" description="User Error Message" />
    <AnnotationType typeName="LegiTest.Description" description="Description" />
    <AnnotationType typeName="LegiTest.ResolutionSteps" description="Resolution Steps" />
  </AnnotationTypes>
</TestSuite>