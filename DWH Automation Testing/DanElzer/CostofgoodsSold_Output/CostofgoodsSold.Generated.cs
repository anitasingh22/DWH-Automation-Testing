// <auto-generated />
namespace DWH_Automation_Testing.DanElzer.CostofgoodsSold_Output
{
    using global::PragmaticWorks.LegiTest.Contracts.Runtime;
    using global::System;
    using global::PragmaticWorks.LegiTest.Runtime;
    using global::NUnit.Framework;
    using global::System.Collections.Generic;
    using global::PragmaticWorks.LegiTest.Runtime.Models;
    using global::System.Threading.Tasks;
    using global::System.Globalization;
    using global::PragmaticWorks.LegiTest.DataComparison.Helper;
    using global::PragmaticWorks.Common.Sql.RowStoreGrid;
    using global::PragmaticWorks.LegiTest.Runtime.Exceptions;
    using global::PragmaticWorks.LegiTest.DataComparison.Comparison;
    using global::System.CodeDom.Compiler;
    
    
    // This class was auto-generated by LegiTest
    // Modifications to this class will be over-written if the test suite is regenerated.
    [TestFixture]
    [GeneratedCode("PragmaticWorks.LegiTest", "2020.1.3.0")]
    [UniqueId("b701adc3-f420-4009-8e08-e425a8b80dbc")]
    public partial class CostofgoodsSold
    {
        
        // Test resources used for passing resources between steps
        private IResourceProvider _testResources;
        
        // Test state tracker used to co-ordinate pushing results to SentryOne Test
        static ITestStateTracker testStateTracker;
        
        // Parameter provider used to find parameters for individual elements
        static IParameterProvider parameterProvider;
        
        static partial void BeforeTest(string testName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTest(string testName, Dictionary<string, object> testResources);
        static partial void BeforeTestElement(string testName, string elementName, Dictionary<string, object> testResources, ref bool cancel);
        static partial void AfterTestElement(string testName, string elementName, Dictionary<string, object> testResources);
        
        static CostofgoodsSold()
        {
            // Create the parameter provider used to find parameters for individual elements.
            parameterProvider = new ParameterProvider(new Guid("d78c7154-04e6-45ca-bda5-110919ee4e18"), typeof(CostofgoodsSold));
        }
        
        [TestFixtureSetUp]
        public static void GroupSetup()
        {
            // Print debug information to the console to aid with parameter debugging.
            ParameterProvider.PrintDebugInformation(parameterProvider);
            // Create the test state tracker to track the group's run state against SentryOne Test.
            testStateTracker = new TestStateTracker(typeof(CostofgoodsSold), Resources.TestManifest_CostofgoodsSold_b701adc3f42040098e08e425a8b80dbc, TestAssemblyInformation.AssemblyTestCount, TestAssemblyInformation.SuiteTestCounts, parameterProvider);
            // Inform the server that the test group has started.
            testStateTracker.RegisterGroupStarted();
        }
        
        [SetUp]
        public void Setup()
        {
            // Create the test resources
            _testResources = new ResourceProvider();
            // Make the test resources available to the parameter provider
            parameterProvider.SetResourcesSource(_testResources);
            // Inform the server that the test has started.
            testStateTracker.RegisterTestStarted(TestContext.CurrentContext.Test.Name);
        }
        
        [TearDown]
        public void Teardown()
        {
            // Inform the server that the test has ended.
            testStateTracker.RegisterTestEnded(TestContext.CurrentContext.Test.Name, (TestContext.CurrentContext.Result.Status == TestStatus.Passed), (TestContext.CurrentContext.Result.Status == TestStatus.Failed), (TestContext.CurrentContext.Result.Status == TestStatus.Inconclusive), (TestContext.CurrentContext.Result.Status == TestStatus.Skipped));
        }
        
        [TestFixtureTearDown]
        public static void GroupTeardown()
        {
            // Inform the server that the test group has ended.
            testStateTracker.RegisterGroupEnded();
        }
        
        // Implementation for test Test 1
        [Category("Cost of goods Sold")]
        [Test]
        [UniqueId("9e5ee519-b770-4311-8833-e07085cecea5")]
        public void Test1()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Test 1", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                // Call implementation for step Inconclusive Assert
                testStateTracker.RunAssert(new Guid("79f24c1e-1d4c-4016-9a42-ea0eb471ee22"), "Inconclusive Assert", Test1_InconclusiveAssert);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Test 1", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Sum of Cost good sold FYTD
        [Category("Cost of goods Sold")]
        [Test]
        [UniqueId("0f4af11a-01f8-4489-9677-65256ac772e5")]
        public void SumofCostgoodsoldFYTD()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Sum of Cost good sold FYTD", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, SumofCostgoodsoldFYTD_ExecutionTrack0, SumofCostgoodsoldFYTD_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids", SumofCostgoodsoldFYTD_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Sum of Cost good sold FYTD", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for test Sum of Cost good sold for PM FYTD
        [Category("Cost of goods Sold")]
        [Test]
        [UniqueId("c468d6fc-4018-4fad-b372-7061259fa770")]
        public void SumofCostgoodsoldforPMFYTD()
        {
            Dictionary<string, object> beforeTestResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTest("Sum of Cost good sold for PM FYTD", beforeTestResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestResourceSnapshot);

            try
            {
                ParallelOptions parallelOptions = new ParallelOptions();
                // Control the maximum number of concurrent threads that execute at one time.  Note that the runtime will attempt to optimize the number of threads used up to the maximum specified here.  A value of -1 indicates to use all available CPUs.
                parallelOptions.MaxDegreeOfParallelism = -1;
                // Wait for execution track tasks to finish
                Parallel.Invoke(parallelOptions, SumofCostgoodsoldforPMFYTD_ExecutionTrack0, SumofCostgoodsoldforPMFYTD_ExecutionTrack1);
                // Call implementation for step Compare Grids
                testStateTracker.RunAssert(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids", SumofCostgoodsoldforPMFYTD_CompareGrids);
            }
            finally
            {
                Dictionary<string, object> afterTestResourceSnapshot = _testResources.Snapshot();
                AfterTest("Sum of Cost good sold for PM FYTD", afterTestResourceSnapshot);
                _testResources.Merge(afterTestResourceSnapshot);
            }
        }
        
        // Implementation for step Inconclusive Assert for Test 1
        private void Test1_InconclusiveAssert()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Test 1", "Inconclusive Assert", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    Assert.Inconclusive("Test was inconclusive.");
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Cost of goods Sold", "Test 1", "Inconclusive Assert", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw exception;
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Test 1", "Inconclusive Assert", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Sum of Cost good sold FYTD
        private void SumofCostgoodsoldFYTD_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("1a7140f7-bae1-417c-b3ae-b3c6cb1036a5"), "Execute Expected Query", TestStepType.Test, SumofCostgoodsoldFYTD_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Sum of Cost good sold FYTD
        private void SumofCostgoodsoldFYTD_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Cost good sold FYTD", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH stage
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHstage_9c0a93a6e32045e78e7d50bba97c5f8f);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9c0a93a6-e320-45e7-8e7d-50bba97c5f8f"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9c0a93a6-e320-45e7-8e7d-50bba97c5f8f"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("27860fdf-e98a-4c90-8980-0d9e987d1a72"), "Value", Resources.TestResource_ExpectedQuery_27860fdfe98a4c9089800d9e987d1a72);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("1a7140f7-bae1-417c-b3ae-b3c6cb1036a5"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("1a7140f7-bae1-417c-b3ae-b3c6cb1036a5"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("1a7140f7-bae1-417c-b3ae-b3c6cb1036a5"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Cost of goods Sold", "Sum of Cost good sold FYTD", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Cost good sold FYTD", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Sum of Cost good sold FYTD
        private void SumofCostgoodsoldFYTD_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("d3c22b2a-f3da-4023-a32c-5c858f9fc1a5"), "Execute Actual Query", TestStepType.Test, SumofCostgoodsoldFYTD_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Sum of Cost good sold FYTD
        private void SumofCostgoodsoldFYTD_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Cost good sold FYTD", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("30ba6fe4-ea85-4003-adc6-5b4ae5e9619d"), "Value", Resources.TestResource_ActualQuery_30ba6fe4ea854003adc65b4ae5e9619d);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("d3c22b2a-f3da-4023-a32c-5c858f9fc1a5"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("d3c22b2a-f3da-4023-a32c-5c858f9fc1a5"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("d3c22b2a-f3da-4023-a32c-5c858f9fc1a5"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Cost of goods Sold", "Sum of Cost good sold FYTD", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Cost good sold FYTD", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Sum of Cost good sold FYTD
        private void SumofCostgoodsoldFYTD_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Cost good sold FYTD", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_46b30c8c77854d3e9e84439cf2c6d938);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("a07875b2-0c06-474f-b14a-0ec994a46ecb"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Cost of goods Sold", "Sum of Cost good sold FYTD", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Cost of goods Sold", "Sum of Cost good sold FYTD", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Cost good sold FYTD", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 0 of test Sum of Cost good sold for PM FYTD
        private void SumofCostgoodsoldforPMFYTD_ExecutionTrack0()
        {
            // Call implementation for step Execute Expected Query
            testStateTracker.RunElement(new Guid("f184b763-539e-4f5d-984f-f4625f0a6b2e"), "Execute Expected Query", TestStepType.Test, SumofCostgoodsoldforPMFYTD_ExecuteExpectedQuery);
        }
        
        // Implementation for step Execute Expected Query for Sum of Cost good sold for PM FYTD
        private void SumofCostgoodsoldforPMFYTD_ExecuteExpectedQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Cost good sold for PM FYTD", "Execute Expected Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset DWH stage
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_DWHstage_9c0a93a6e32045e78e7d50bba97c5f8f);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("9c0a93a6-e320-45e7-8e7d-50bba97c5f8f"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("9c0a93a6-e320-45e7-8e7d-50bba97c5f8f"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Expected Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("8629fb71-ec16-453f-9278-9ff33904fd31"), "Value", Resources.TestResource_ExpectedQuery_8629fb71ec16453f92789ff33904fd31);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("f184b763-539e-4f5d-984f-f4625f0a6b2e"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("f184b763-539e-4f5d-984f-f4625f0a6b2e"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("f184b763-539e-4f5d-984f-f4625f0a6b2e"), "Execute Expected Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_LeftQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Cost of goods Sold", "Sum of Cost good sold for PM FYTD", "Execute Expected Query", 1, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Cost good sold for PM FYTD", "Execute Expected Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for execution track 1 of test Sum of Cost good sold for PM FYTD
        private void SumofCostgoodsoldforPMFYTD_ExecutionTrack1()
        {
            // Call implementation for step Execute Actual Query
            testStateTracker.RunElement(new Guid("7269c7f9-6895-4b93-acac-0ba41891004a"), "Execute Actual Query", TestStepType.Test, SumofCostgoodsoldforPMFYTD_ExecuteActualQuery);
        }
        
        // Implementation for step Execute Actual Query for Sum of Cost good sold for PM FYTD
        private void SumofCostgoodsoldforPMFYTD_ExecuteActualQuery()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Cost good sold for PM FYTD", "Execute Actual Query", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset SSAS Matrix Production
                    Connection connection = Connection.ReadFromByteArray(Resources.TestResource_SSASMatrixProduction_b89de6cae6604205b75e0566246db3fc);
                    connection.ConnectionString = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ConnectionString", connection.ConnectionString);
                    connection.ProviderInvariantName = parameterProvider.GetTypedParameter<string>(new Guid("b89de6ca-e660-4205-b75e-0566246db3fc"), "ProviderInvariantName", connection.ProviderInvariantName);
                    // Read asset Actual Query
                    string query = parameterProvider.GetTypedParameter<string>(new Guid("c672e003-103f-4291-84b7-77e5b3cdffa4"), "Value", Resources.TestResource_ActualQuery_c672e003103f429184b777e5b3cdffa4);
                    GridCollection gridCollection = GridCollectionLoader.LoadGrid(connection.ProviderInvariantName, connection.ConnectionString, query, false, parameterProvider.GetTypedParameter<int>(new Guid("7269c7f9-6895-4b93-acac-0ba41891004a"), "Timeout", 30));
                    try
                    {
                        Assert.Greater(gridCollection.Count, 0, "Expected a result set collection with at least 1 result sets.");
                        testStateTracker.PushAssertResult(new Guid("7269c7f9-6895-4b93-acac-0ba41891004a"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, true);
                    }
                    catch
                    {
                        testStateTracker.PushAssertResult(new Guid("7269c7f9-6895-4b93-acac-0ba41891004a"), "Execute Actual Query : Grid Count", 0, gridCollection.Count, false);
                        throw;
                    }
                    _testResources["SqlTest_RightQuery"] = gridCollection[0];
                }
                catch (Exception exception)
                {
                    throw new TestExecutionStepException("Cost of goods Sold", "Sum of Cost good sold for PM FYTD", "Execute Actual Query", 2, exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Cost good sold for PM FYTD", "Execute Actual Query", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
        
        // Implementation for step Compare Grids for Sum of Cost good sold for PM FYTD
        private void SumofCostgoodsoldforPMFYTD_CompareGrids()
        {
            Dictionary<string, object> beforeTestElementResourceSnapshot = _testResources.Snapshot();
            bool cancel = false;
            BeforeTestElement("Sum of Cost good sold for PM FYTD", "Compare Grids", beforeTestElementResourceSnapshot, ref cancel);
            if (cancel)
            {
                return;
            }
            _testResources.Merge(beforeTestElementResourceSnapshot);

            try
            {
                try
                {
                    // Read asset Comparison Manifest
                    ComparisonManifest manifest = ComparisonManifest.Deserialize(Resources.TestResource_ComparisonManifest_c36f1d8cbbff4b289c58ce67f477b52e);
                    IGrid expectedGrid = ((IGrid)(_testResources["SqlTest_LeftQuery"]));
                    IGrid actualGrid = ((IGrid)(_testResources["SqlTest_RightQuery"]));
                    GridComparer comparer = default(GridComparer);
                    try
                    {
                        // Create the comparer
                        comparer = new GridComparer(manifest, expectedGrid, actualGrid);
                        comparer.KeepGridObjectsAlive = true;
                        comparer.IgnoreLeftOnlyRows = false;
                        comparer.IgnoreRightOnlyRows = false;
                        comparer.IgnoreDifferentRows = false;
                        comparer.IgnoreAggregates = false;
                        comparer.IncludeEqualRows = false;
                        IDifferenceLogger logger = default(IDifferenceLogger);
                        try
                        {
                            // Run the comparison
                            logger = comparer.Compare(10);
                            // Get the difference log and send to the server
                            DifferenceLog differenceLog = logger.StopWritingAndGetLog(parameterProvider.GetTypedParameter<int>(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "DifferenceLogRowLimit", 200));
                            testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Result Grid", null, differenceLog, true);
                            try
                            {
                                Assert.AreEqual(0, logger.DifferentRows, string.Format(CultureInfo.CurrentCulture, "Expected no differences between result sets.\r\n\r\nRow differences:\r\n{0}", logger.DifferentRowsValueDescription));
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Different Rows", 0, logger.DifferentRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Different Rows", 0, logger.DifferentRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.LeftOnlyRows, ("Expected to find 0 rows that exist only in the expected result set. " + logger.LeftOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Expected Only Rows", 0, logger.LeftOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.RightOnlyRows, ("Expected to find 0 rows that exist only in the actual result set. " + logger.RightOnlyRowsDescription));
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Actual Only Rows", 0, logger.RightOnlyRows, false);
                                throw;
                            }
                            try
                            {
                                Assert.AreEqual(0, logger.AggregatesOutOfTolerance, "Expected to find 0 aggregations whose values were out of tolerance");
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, true);
                            }
                            catch
                            {
                                testStateTracker.PushAssertResult(new Guid("0e9c1665-92b1-4578-8db0-1201aadb2d15"), "Compare Grids : Aggregates Out Of Tolerance", 0, logger.AggregatesOutOfTolerance, false);
                                throw;
                            }
                        }
                        finally
                        {
                            if ((logger != default(IDifferenceLogger)))
                            {
                                logger.Dispose();
                            }
                        }
                    }
                    finally
                    {
                        if ((comparer != default(GridComparer)))
                        {
                            comparer.Dispose();
                        }
                    }
                }
                catch (AssertionException exception)
                {
                    throw new AssertionException(string.Format(CultureInfo.CurrentCulture, "\n\nGroup: {0}\nTest: {1}\nAssertion: {2}\n\n{3}", "Cost of goods Sold", "Sum of Cost good sold for PM FYTD", "Compare Grids", exception.Message), exception.InnerException);
                }
                catch (Exception exception)
                {
                    throw new TestAssertionException("Cost of goods Sold", "Sum of Cost good sold for PM FYTD", "Compare Grids", exception);
                }
            }
            finally
            {
                Dictionary<string, object> afterTestElementResourceSnapshot = _testResources.Snapshot();
                AfterTestElement("Sum of Cost good sold for PM FYTD", "Compare Grids", afterTestElementResourceSnapshot);
                _testResources.Merge(afterTestElementResourceSnapshot);
            }
        }
    }
}

